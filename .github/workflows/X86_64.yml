# Author: P3TERX (Modified and Optimized)
#=================================================
name: 💻 X86_64
permissions:
  contents: write
  actions: read
on:
  workflow_dispatch:
    inputs:
      lan_addr:
        description: "📍 默认 LAN 地址"
        default: "192.168.1.10"
        required: true
        type: string
      root_password:
        description: "🔑 Root 密码"
        default: "password"
        required: false
        type: string
      docker:
        description: "🐋 Docker 支持"
        type: boolean
        default: true
      ssrp:
        description: "🚀 ShadowSocksR Plus+"
        type: boolean
        default: true
      passwall:
        description: "🌐 Passwall"
        type: boolean
        default: true
      nikki:
        description: "📦 Nikki"
        type: boolean
        default: true
      openclash:
        description: "⚡ OpenClash"
        type: boolean
        default: true
      lucky:
        description: "🍀 Lucky"
        type: boolean
        default: true
      oaf:
        description: "🛡️ OpenAppFilter"
        type: boolean
        default: true
      force_clean:
        description: "🧹 强制清理缓存"
        type: boolean
        default: false
env:
  REPO_URL: https://github.com/openwrt/openwrt
  REPO_BRANCH: openwrt-24.10
  CONFIG_FILE: configs/x86_64.config
  DIY_SCRIPT: scripts/diy-x86_64_demo.sh
  FEEDS_CONF: feeds.conf.default
  CLASH_KERNEL: amd64
  UPLOAD_ARTIFACTS: false
  UPLOAD_RELEASE: true
  FIRMWARE_TAG: X86_64
  TZ: Asia/Shanghai
  DEBIAN_FRONTEND: noninteractive
concurrency:
  group: build-${{ github.ref }}-${{ github.event.inputs.lan_addr }}
  cancel-in-progress: false
jobs:
  build:
    name: 🏗️ Build OpenWrt
    runs-on: ubuntu-24.04
    timeout-minutes: 720
    outputs:
      firmware_path: ${{ steps.organize.outputs.firmware_path }}
      kernel_version: ${{ steps.organize.outputs.kernel_version }}
    steps:
      # ============================================
      # 1. 环境初始化
      # ============================================
      - name: 🔧 Setup Environment
        id: env
        run: |
          # 时区与 Git 基本配置
          sudo timedatectl set-timezone "$TZ"
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          # 构建信息
          VERSION=$(date +'%Y.%m.%d')
          DATE=$(date +'%Y-%m-%d %H:%M:%S')
          BUILD_ID="${{ github.run_number }}-${GITHUB_SHA::7}"
          FILE_DATE=$(date +'%Y.%m.%d-%H%M')
          
          # 自动并行计算
          PROC_COUNT=$(nproc)
          MEM_GB=$(($(free -m | awk '/^Mem:/{print $2}') / 1024))
          JOBS=$((MEM_GB / 2)) # 优化内存计算
          JOBS=$((JOBS > PROC_COUNT ? PROC_COUNT : JOBS))
          JOBS=$((JOBS < 1 ? 1 : JOBS))
          echo "BUILD_VERSION=$VERSION" >> $GITHUB_ENV
          echo "BUILD_DATE=$(date "+%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV
          echo "BUILD_ID=$BUILD_ID" >> $GITHUB_ENV
          echo "FILE_DATE=$FILE_DATE" >> $GITHUB_ENV
          echo "COMPILE_JOBS=$JOBS" >> $GITHUB_ENV
          
      # ============================================
      # 2. 系统优化
      # ============================================
      - name: 🧹 Free Disk Space
        uses: sbwml/actions@free-disk
        
      - name: 💾 Setup Swap & Memory Optimization
        run: |
          sudo fallocate -l 8G /swapfile
          sudo chmod 600 /swapfile
          sudo mkswap /swapfile
          sudo swapon /swapfile
          echo "vm.swappiness = 10" | sudo tee -a /etc/sysctl.conf
          echo "vm.vfs_cache_pressure = 50" | sudo tee -a /etc/sysctl.conf
          sudo sysctl -p
          
      # ============================================
      # 3. 代码检出
      # ============================================
      - name: ✅ Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          
      # ============================================
      # 4. 构建依赖安装
      # ============================================
      - name: 🛠️ Build System Setup
        uses: sbwml/actions@openwrt-build-setup
        
      - name: 📦 Install LLVM
        uses: sbwml/actions@install-llvm
      # ============================================
      # 5. 源码准备与信息采集
      # ============================================
      - name: 📥 Prepare OpenWrt Source
        run: |
          echo "🔄 Cloning OpenWrt source..."
          for attempt in 1 2 3; do
            if git clone --depth=1 "$REPO_URL" -b "$REPO_BRANCH" openwrt; then
              break
            fi
            echo "❌ Attempt $attempt failed, retrying..."
            rm -rf openwrt
            sleep 15
          done
          cd openwrt
          echo "OPENWRT_PATH=$PWD" >> $GITHUB_ENV
          COMMIT_INFO=$(git log -1 --pretty=format:'%H|%an|%ai|%s')
          IFS='|' read -r COMMIT_HASH COMMIT_AUTHOR COMMIT_DATE COMMIT_MESSAGE <<< "$COMMIT_INFO"
          echo "COMMIT_HASH=$COMMIT_HASH" >> $GITHUB_ENV
          echo "COMMIT_AUTHOR=$COMMIT_AUTHOR" >> $GITHUB_ENV
          echo "COMMIT_DATE=$COMMIT_DATE" >> $GITHUB_ENV
          echo "COMMIT_MESSAGE=$COMMIT_MESSAGE" >> $GITHUB_ENV
      # ============================================
      # 6. 优化缓存策略
      # ============================================
      - name: ☁️ Cache Toolchain
        uses: actions/cache@v4
        with:
          path: |
            openwrt/staging_dir/toolchain-*
            openwrt/build_dir/toolchain-*
          key: toolchain-${{ env.REPO_BRANCH }}-${{ github.run_number }}-v7
          restore-keys: |
            toolchain-${{ env.REPO_BRANCH }}-
     
      - name: ☁️ Cache Builds and Downloads
        uses: actions/cache@v4
        with:
          path: |
            openwrt/dl
            openwrt/staging_dir/host*
            openwrt/build_dir/host*
            openwrt/.ccache
          key: cache-${{ env.REPO_BRANCH }}-${{ github.run_number }}-v7
          restore-keys: |
            cache-${{ env.REPO_BRANCH }}-
      # ============================================
      # 7. Feeds 配置
      # ============================================
      - name: 📚 Configure Feeds
        run: |
          cd "$OPENWRT_PATH"
          rm -rf feeds tmp/packagecache
          [ -f "${{ github.workspace }}/feeds.conf.default" ] && cp "${{ github.workspace }}/feeds.conf.default" .
          ./scripts/feeds update -a
          ./scripts/feeds install -a
      # ============================================
      # 8. ccache 配置
      # ============================================
      - name: 🔧 Setup ccache
        run: |
          export USE_CCACHE=1
          export CCACHE_DIR="$PWD/.ccache"
          export PATH="/usr/lib/ccache:$PATH"
          mkdir -p "$CCACHE_DIR"
          ccache -M 15G
          ccache -s 
      # ============================================
      # 9. 应用自定义配置
      # ============================================
      - name: 🎨 Apply Custom Configuration
        env:
          LAN: ${{ github.event.inputs.lan_addr }}
          ROOT_PASSWORD: ${{ github.event.inputs.root_password }}
          ENABLE_DOCKER: ${{ github.event.inputs.docker }}
          ENABLE_SSRP: ${{ github.event.inputs.ssrp }}
          ENABLE_PASSWALL: ${{ github.event.inputs.passwall }}
          ENABLE_NIKKI: ${{ github.event.inputs.nikki }}
          ENABLE_OPENCLASH: ${{ github.event.inputs.openclash }}
          ENABLE_LUCKY: ${{ github.event.inputs.lucky }}
          ENABLE_OAF: ${{ github.event.inputs.oaf }}
        run: |
          cd "$OPENWRT_PATH"
          cp "${{ github.workspace }}/$CONFIG_FILE" .config
          if [ -f "${{ github.workspace }}/$DIY_SCRIPT" ]; then
            chmod +x "${{ github.workspace }}/$DIY_SCRIPT"
            "${{ github.workspace }}/$DIY_SCRIPT"
          fi
          
          make defconfig
        
          echo "🎯 Target: $(awk -F'=' '/^CONFIG_TARGET_BOARD/ {print $2}' .config)"
          
      # ============================================
      # 10. 强制清理
      # ============================================
      - name: 🧹 Clean Build Directory
        if: github.event.inputs.force_clean == 'true'
        run: |
          cd "$OPENWRT_PATH"
          echo "🧹 Force cleaning build directory..."
          make dirclean
      # ============================================
      # 11. 下载依赖包
      # ============================================
      - name: 📥 Download Packages
        run: |
          cd "$OPENWRT_PATH"
          echo "📥 Starting download process..."
          make download -j$(nproc)
      # ============================================
      # 12. 编译固件
      # ============================================
      - name: 🔨 Compile Firmware
        id: compile
        run: |
          cd "$OPENWRT_PATH"
          echo "🚀 Starting firmware compilation with $(nproc) cores..."
          make -j$(nproc)
      # ============================================
      # 13. 整理固件文件
      # ============================================
      - name: 📦 Organize Firmware
        if: steps.compile.outputs.status == 'success'
        id: organize
        run: |
          cd "$OPENWRT_PATH/bin/targets"/*/*
          echo "📦 Generated Files:"
          ls -lah
          
          KERNEL_VERSION="unknown"
          if ls *.manifest 1> /dev/null 2>&1; then
            KERNEL_VERSION=$(grep "^kernel " *.manifest | head -1 | awk '{print $3}' | cut -d- -f1-2 || echo "unknown")
          fi
          cp "$OPENWRT_PATH/.config" build.config
          
          echo "firmware_path=$PWD" >> $GITHUB_OUTPUT
          echo "kernel_version=$KERNEL_VERSION" >> $GITHUB_OUTPUT
      # ============================================
      # 14. 上传 Artifacts
      # ============================================
      - name: 📤 Upload Artifacts
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_ARTIFACTS == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: OpenWrt-${{ env.DEVICE_TARGET }}-${{ env.FILE_DATE }}
          path: ${{ steps.organize.outputs.firmware_path }}
          retention-days: 30
          
      # ============================================
      # 15. 创建 Release
      # ============================================
      - name: 🚀 Create Release
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true'
        uses: ncipollo/release-action@v1.14.0
        with:
          name: ${{ env.FILE_DATE }} • ${{ env.FIRMWARE_TAG }}
          allowUpdates: true
          tag: ${{ env.FIRMWARE_TAG }}-${{ env.FILE_DATE }}
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: ${{ steps.organize.outputs.firmware_path }}/*
          body: |
            ## 🎯 OpenWrt Firmware Release
            
            **LAN Address**: `${{ github.event.inputs.lan_addr }}`
            **Root Password**: `${{ github.event.inputs.root_password }}`
            **Kernel Version**: `${{ steps.organize.outputs.kernel_version }}`
