# Author: P3TERX (Modified and Optimized)
#=================================================
name: 💻 X86_64
# ============================================
# 触发条件
# ============================================
on:
  workflow_dispatch:
    inputs:
      lan_addr:
        description: "📍 默认 LAN 地址"
        default: "192.168.1.10"
        required: true
        type: string
      root_password:
        description: "🔑 Root 密码"
        default: "password"
        required: false
        type: string
      docker:
        description: "🐋 Docker 支持"
        type: boolean
        default: true
      ssrp:
        description: "🚀 ShadowSocksR Plus+"
        type: boolean
        default: true
      passwall:
        description: "🌐 Passwall"
        type: boolean
        default: true
      nikki:
        description: "📦 Nikki"
        type: boolean
        default: true
      openclash:
        description: "⚡ OpenClash"
        type: boolean
        default: true
      lucky:
        description: "🍀 Lucky"
        type: boolean
        default: true
      oaf:
        description: "🛡️ OpenAppFilter"
        type: boolean
        default: true
# ============================================
# 全局环境变量
# ============================================
env:
  REPO_URL: https://github.com/openwrt/openwrt
  REPO_BRANCH: openwrt-24.10
  CONFIG_FILE: configs/x86_64.config
  DIY_SCRIPT: scripts/diy-x86_64.sh
  CLASH_KERNEL: amd64
  UPLOAD_ARTIFACTS: false
  UPLOAD_RELEASE: true
  FIRMWARE_TAG: X86_64
  USE_CACHE: true
  TZ: Asia/Shanghai
  DEBIAN_FRONTEND: noninteractive
# ============================================
# 并发控制
# ============================================
concurrency:
  group: build-${{ github.ref }}-${{ github.event.inputs.lan_addr }}
  cancel-in-progress: false
# ============================================
# 主任务
# ============================================
jobs:
  initialize:
    name: 🎯 Initialize Build
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      date: ${{ steps.version.outputs.date }}
      build_id: ${{ steps.version.outputs.build_id }}
    steps:
      - name: 📝 Generate Build Info
        id: version
        run: |
          VERSION=$(date +'%Y.%m.%d')
          DATE=$(date +'%Y-%m-%d %H:%M:%S')
          BUILD_ID="${{ github.run_number }}-${GITHUB_SHA::7}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "date=$DATE" >> $GITHUB_OUTPUT
          echo "build_id=$BUILD_ID" >> $GITHUB_OUTPUT
          echo "📅 Build Version: $VERSION"
          echo "🕐 Build Date: $DATE"
          echo "🔖 Build ID: $BUILD_ID"
  build:
    name: 🏗️ Build OpenWrt
    needs: initialize
    runs-on: ubuntu-24.04
    timeout-minutes: 720
    env:
      BUILD_VERSION: ${{ needs.initialize.outputs.version }}
      BUILD_DATE: ${{ needs.initialize.outputs.date }}
      BUILD_ID: ${{ needs.initialize.outputs.build_id }}
    steps:
      - name: 🔧 Setup Environment
        id: env
        run: |
          sudo timedatectl set-timezone "$TZ"
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          echo "WORKSPACE=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "FILE_DATE=$(date +'%Y.%m.%d-%H%M')" >> $GITHUB_ENV
          echo "TAG_TIME=$(date +'%Y.%m.%d')" >> $GITHUB_ENV
          PROC_COUNT=$(nproc)
          MEM_GB=$(($(free -m | awk '/^Mem:/{print $2}') / 1024))
          JOBS=$((MEM_GB / 2))
          JOBS=$((JOBS > PROC_COUNT ? PROC_COUNT : JOBS))
          JOBS=$((JOBS < 1 ? 1 : JOBS))
          echo "PROC_COUNT=$PROC_COUNT" >> $GITHUB_ENV
          echo "MEM_GB=$MEM_GB" >> $GITHUB_ENV
          echo "COMPILE_JOBS=$JOBS" >> $GITHUB_ENV
      - name: 📊 System Information
        run: |
          cat << EOF
          =====================================
          📊 System Information
          =====================================
          CPU Model: $(lscpu | grep 'Model name' | cut -d':' -f2 | xargs)
          CPU Cores: ${{ env.PROC_COUNT }}
          Memory: ${{ env.MEM_GB }}GB
          Compile Jobs: ${{ env.COMPILE_JOBS }}
          Kernel: $(uname -r)
          OS: $(lsb_release -ds)
          =====================================
          Disk Usage:
          $(df -h | grep -E '^/dev/')
          =====================================
          EOF
      - name: 🧹 Free Disk Space
        uses: sbwml/actions@free-disk
      - name: 💾 Setup Swap
        run: |
          sudo fallocate -l 8G /swapfile
          sudo chmod 600 /swapfile
          sudo mkswap /swapfile
          sudo swapon /swapfile
          cat << EOF | sudo tee -a /etc/sysctl.conf
          vm.swappiness=10
          vm.vfs_cache_pressure=50
          vm.dirty_ratio=15
          vm.dirty_background_ratio=5
          vm.max_map_count=262144
          EOF
          sudo sysctl -p
          echo "Memory status:"
          free -h
      - name: ✅ Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: 🛠️ Build System Setup
        uses: sbwml/actions@openwrt-build-setup
      - name: 📦 Install LLVM
        uses: sbwml/actions@install-llvm
      - name: 📥 Clone OpenWrt Source
        id: clone
        run: |
          git clone --depth=1 "$REPO_URL" -b "$REPO_BRANCH" openwrt
          cd openwrt
          echo "OPENWRT_PATH=$PWD" >> $GITHUB_ENV
          COMMIT_INFO=$(git log -1 --pretty=format:'%an|%ci|%s|%H')
          IFS='|' read -r AUTHOR DATE MESSAGE HASH <<< "$COMMIT_INFO"
          echo "COMMIT_AUTHOR=$AUTHOR" >> $GITHUB_ENV
          echo "COMMIT_DATE=$DATE" >> $GITHUB_ENV
          echo "COMMIT_MESSAGE=$MESSAGE" >> $GITHUB_ENV
          echo "COMMIT_HASH=$HASH" >> $GITHUB_ENV
      - name: 💾 Cache Management
        id: cache
        if: env.USE_CACHE == 'true'
        uses: HiGarfield/cachewrtbuild@main
        with:
          ccache: true
          toolchain: true
          skip: false
          clean: false
          prefix: ${{ env.OPENWRT_PATH }}
          mixkey: ${{ env.REPO_URL }}-${{ env.REPO_BRANCH }}-x86_64-generic
        # 缓存编译工具链与 ccache，显著缩短后续构建时间，同时需注意缓存命中时的残留产物
      - name: 🧽 Reset Build Artifacts
        run: |
          cd $OPENWRT_PATH
          # 缓存恢复后移除旧的 build/tmp 等目录，避免二次构建出现残留引发的工具链冲突
          rm -rf ./tmp
          rm -rf ./build_dir
          mkdir -p ./build_dir
          make defconfig
        # 这一步确保即使缓存命中也能从干净的编译目录开始
      - name: 📚 Update Feeds
        run: |
          cd $OPENWRT_PATH
          if [ -f "${{ github.workspace }}/feeds.conf.default" ]; then
            cp ${{ github.workspace }}/feeds.conf.default .
          else
            echo "::warning::feeds.conf.default not found in . Using default OpenWrt feeds."
          fi
          ./scripts/feeds update -a
          ./scripts/feeds install -a
      - name: 🎨 Custom Configuration
        env:
          LAN: ${{ github.event.inputs.lan_addr }}
          ROOT_PASSWORD: ${{ github.event.inputs.root_password }}
          ENABLE_DOCKER: ${{ github.event.inputs.docker == 'true' && 'y' || 'n' }}
          ENABLE_SSRP: ${{ github.event.inputs.ssrp == 'true' && 'y' || 'n' }}
          ENABLE_PASSWALL: ${{ github.event.inputs.passwall == 'true' && 'y' || 'n' }}
          ENABLE_NIKKI: ${{ github.event.inputs.nikki == 'true' && 'y' || 'n' }}
          ENABLE_OPENCLASH: ${{ github.event.inputs.openclash == 'true' && 'y' || 'n' }}
          ENABLE_LUCKY: ${{ github.event.inputs.lucky == 'true' && 'y' || 'n' }}
          ENABLE_OAF: ${{ github.event.inputs.oaf == 'true' && 'y' || 'n' }}
        run: |
          if [ -d "$GITHUB_WORKSPACE/files" ]; then
            mv "$GITHUB_WORKSPACE/files" "$OPENWRT_PATH/files"
          fi
          if [ -d "$GITHUB_WORKSPACE/scripts" ]; then
            chmod +x "$GITHUB_WORKSPACE"/scripts/*.sh || true
          fi
          if [ -f "$DIY_SCRIPT" ]; then
            chmod +x "$DIY_SCRIPT"
          fi
          cd "$OPENWRT_PATH"
          cp "$GITHUB_WORKSPACE/${CONFIG_FILE}" .config
          "$GITHUB_WORKSPACE/$DIY_SCRIPT"
          "$GITHUB_WORKSPACE/scripts/preset-mihimo-core.sh" "$CLASH_KERNEL"
          "$GITHUB_WORKSPACE/scripts/preset-adguard-core.sh" "$CLASH_KERNEL"
          make defconfig
          DEVICE_TARGET=$(grep '^CONFIG_TARGET_BOARD=' .config | cut -d'"' -f2)
          DEVICE_SUBTARGET=$(grep '^CONFIG_TARGET_SUBTARGET=' .config | cut -d'"' -f2)
          echo "DEVICE_TARGET=$DEVICE_TARGET" >> $GITHUB_ENV
          echo "DEVICE_SUBTARGET=$DEVICE_SUBTARGET" >> $GITHUB_ENV
          echo "IP_ADDR=${{ github.event.inputs.lan_addr }}" >> $GITHUB_ENV
          echo "ROOT_PASSWORD=${{ github.event.inputs.root_password }}" >> $GITHUB_ENV
          latest_release=$(curl -s "https://api.github.com/repos/openwrt/openwrt/releases/latest" | grep "tag_name" | head -n 1 | cut -d : -f2 | sed 's/[ \"v,]//g')
          echo "latest_release=${latest_release}" >> $GITHUB_ENV
          echo "📱 Target: $DEVICE_TARGET-$DEVICE_SUBTARGET"
          echo "📌 Latest Release: $latest_release"
      - name: 📥 Download Packages
        run: |
          cd $OPENWRT_PATH
          echo "📥 Starting package download..."
          make download -j$((COMPILE_JOBS + 1))
          echo "🔍 Checking for failed downloads..."
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;
          make download -j1 || true
          echo "✅ Download completed"
      - name: 🔨 Compile Firmware
        id: compile
        timeout-minutes: 600
        run: |
          cd $OPENWRT_PATH
          cat << EOF
          =====================================
          🔨 Starting Compilation
          =====================================
          Jobs: $COMPILE_JOBS
          Flags: $BUILD_FLAGS
          Time: $(date)
          =====================================
          EOF
          compile_firmware() {
            local jobs=$1
            echo "🔧 Compiling with $jobs jobs..."
            if make -j"$jobs" $BUILD_FLAGS 2>&1 | tee compile.log; then
              return 0
            else
              return 1
            fi
          }
          if compile_firmware "$COMPILE_JOBS"; then
            echo "✅ Compilation successful!"
          elif compile_firmware "$((COMPILE_JOBS/2))"; then
            echo "✅ Compilation successful (reduced jobs)!"
          elif compile_firmware 1; then
            echo "✅ Compilation successful (single job)!"
          else
            echo "❌ Compilation failed!"
            echo "=== Last 100 lines of compile.log ==="
            tail -n 100 compile.log
            exit 1
          fi
          echo "status=success" >> $GITHUB_OUTPUT
        # 根据硬件资源动态调整并行度，失败时逐步降级，最大限度保证构建成功率
      - name: 💾 Check Space
        if: always()
        run: |
          echo "=== Disk Usage ==="
          df -h
          echo
          echo "=== Memory Usage ==="
          free -h
      - name: 📦 Organize Firmware
        id: organize
        if: steps.compile.outputs.status == 'success'
        run: |
          cd $OPENWRT_PATH/bin/targets/*/*
          echo "=== Generated files ==="
          ls -lah
          KERNEL_VERSION=$(cat *.manifest | grep ^kernel | cut -d- -f2 | tr -d ' ')
          cp $OPENWRT_PATH/.config build.config
          if [ -d packages ]; then
            tar -czf kernel-modules.tar.gz packages/
            rm -rf packages
          fi
          rm -f feeds.buildinfo version.buildinfo
          cat > firmware_info.json << EOF
          {
            "build_date": "$BUILD_DATE",
            "build_version": "$BUILD_VERSION",
            "build_id": "$BUILD_ID",
            "kernel_version": "$KERNEL_VERSION",
            "target": "$DEVICE_TARGET",
            "subtarget": "$DEVICE_SUBTARGET",
            "lan_address": "${{ github.event.inputs.lan_addr }}",
            "commit_hash": "$COMMIT_HASH",
            "plugins": {
              "docker": ${{ github.event.inputs.docker }},
              "ssrp": ${{ github.event.inputs.ssrp }},
              "passwall": ${{ github.event.inputs.passwall }},
              "openclash": ${{ github.event.inputs.openclash }},
              "nikki": ${{ github.event.inputs.nikki }},
              "lucky": ${{ github.event.inputs.lucky }},
              "oaf": ${{ github.event.inputs.oaf }}
            }
          }
          EOF
          echo "firmware_path=$PWD" >> $GITHUB_OUTPUT
          echo "kernel_version=$KERNEL_VERSION" >> $GITHUB_OUTPUT
          echo "KERNEL_VERSION=$KERNEL_VERSION" >> $GITHUB_ENV
          echo "FIRMWARE_PATH=$PWD" >> $GITHUB_ENV
        # 将关键构建信息固化，便于发布/排错
      - name: 📤 Upload Artifacts
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_ARTIFACTS == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: OpenWrt-${{ env.DEVICE_TARGET }}-${{ env.FILE_DATE }}
          path: ${{ env.FIRMWARE_PATH }}
          retention-days: 30
          compression-level: 6
      - name: 🚀 Create Release
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true'
        uses: ncipollo/release-action@v1.14.0
        with:
          name: ${{ env.FILE_DATE }}-OpenWrt-${{ env.FIRMWARE_TAG }}
          tag: ${{ env.FIRMWARE_TAG }}-${{ env.BUILD_VERSION }}
          allowUpdates: true
          removeArtifacts: false
          replacesArtifacts: true
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: ${{ env.FIRMWARE_PATH }}/*
          body: |
            ## 🎯 OpenWrt Firmware [${{ env.BUILD_ID }}]
            
            ### 📊 构建信息
            | 项目 | 信息 |
            |------|------|
            | **版本** | `${{ env.latest_release }}` |
            | **日期** | `${{ env.BUILD_DATE }}` |
            | **架构** | `${{ env.DEVICE_TARGET }}_${{ env.DEVICE_SUBTARGET }}` |
            | **内核** | `${{ env.KERNEL_VERSION }}` |
            | **LAN IP** | `${{ github.event.inputs.lan_addr }}` |
            | **密码** | `${{ github.event.inputs.root_password }}` |
            
            ### 📦 包含的插件
            | 插件 | 状态 |
            |------|------|
            | Docker | ${{ github.event.inputs.docker == 'true' && '✅ 已编译' || '❌ 未编译' }} |
            | ShadowSocksR Plus+ | ${{ github.event.inputs.ssrp == 'true' && '✅ 已编译' || '❌ 未编译' }} |
            | Passwall | ${{ github.event.inputs.passwall == 'true' && '✅ 已编译' || '❌ 未编译' }} |
            | OpenClash | ${{ github.event.inputs.openclash == 'true' && '✅ 已编译' || '❌ 未编译' }} |
            | Nikki | ${{ github.event.inputs.nikki == 'true' && '✅ 已编译' || '❌ 未编译' }} |
            | Lucky | ${{ github.event.inputs.lucky == 'true' && '✅ 已编译' || '❌ 未编译' }} |
            | OpenAppFilter | ${{ github.event.inputs.oaf == 'true' && '✅ 已编译' || '❌ 未编译' }} |
            
            ### 📝 源码信息
            - **仓库**: [${{ env.REPO_URL }}](${{ env.REPO_URL }})
            - **分支**: `${{ env.REPO_BRANCH }}`
            - **提交**: `${{ env.COMMIT_HASH }}`
            - **作者**: ${{ env.COMMIT_AUTHOR }}
            - **时间**: ${{ env.COMMIT_DATE }}
            - **消息**: ${{ env.COMMIT_MESSAGE }}
            
            ### 📥 安装说明
            ```bash
            # 解压固件
            gunzip openwrt-*.img.gz
            
            # 写入设备
            dd if=openwrt-*.img of=/dev/sdX bs=4M status=progress
