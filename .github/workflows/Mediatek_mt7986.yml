# .github/workflows/Mediatek_mt7986.yml
# -------------------------------------------------
# Mediatek mt7986 编译工作流（已修正 REPO_URL、DIY_SCRIPT、变量导出等）
# -------------------------------------------------
name: 🛜 Mediatek_mt7986
on:
  workflow_dispatch:
    inputs:
      lan_addr:
        description: "Setting default LAN address"
        required: true
        default: "192.168.1.10"
        type: string
      root_password:
        description: "默认 root 密码（可选，默认 password）"
        required: false
        default: "password"
        type: string
      docker:
        description: "是否编译 Docker"
        type: boolean
        default: true
env:
  # ----------------------- 基础信息 -----------------------
  REPO_URL: padavanonly/immortalwrt-mt798x-6.6   # **只保留 owner/repo**（不带 https）
  REPO_BRANCH: openwrt-24.10-6.6
  CONFIG_FILE: configs/mediatek_mt7986.config
  DIY_SCRIPT: scripts/diy-mediatek.sh
  CACHE_VER: v1
  UPLOAD_BIN_DIR: false
  FIRMWARE_RELEASE: true
  FIRMWARE_TAG: Mediatek_mt7986
  # ----------------------- 镜像 & Git 地址 --------------------
  MIRROR: https://mirrors.tuna.tsinghua.edu.cn/openwrt
  GITEA: git.kejizero.online/zhao
  GITHUB: github.com
jobs:
  build:
    runs-on: ubuntu-24.04
    timeout-minutes: 420   # 7 h
    steps:
      # -------------------------------------------------
      # 1️⃣ 基础环境
      # -------------------------------------------------
      - name: Setup environment
        run: |
          sudo timedatectl set-timezone Asia/Shanghai
          git config --global user.name actions
          git config --global user.email action@github.com
      - name: Free disk space
        uses: sbwml/actions@free-disk
      # -------------------------------------------------
      # 2️⃣ 检出源码（直接使用 actions/checkout）
      # -------------------------------------------------
      - name: Checkout OpenWrt source
        uses: actions/checkout@v4
        with:
          repository: ${{ env.REPO_URL }}
          ref: ${{ env.REPO_BRANCH }}
          path: openwrt
          fetch-depth: 1   # 只要最新提交
      # -------------------------------------------------
      # 3️⃣ 收集源码元信息（提交、日期等）
      # -------------------------------------------------
      - name: Export repository meta
        id: meta
        run: |
          cd openwrt
          echo "OPENWRT_PATH=$PWD" >> $GITHUB_ENV
          echo "COMMIT_AUTHOR=$(git show -s --format='作者: %an')"   >> $GITHUB_ENV
          echo "COMMIT_DATE=$(git show -s --format='时间: %ci')"    >> $GITHUB_ENV
          echo "COMMIT_MESSAGE=$(git show -s --format='内容: %s')" >> $GITHUB_ENV
          echo "COMMIT_HASH=$(git rev-parse HEAD)"                >> $GITHUB_ENV
          echo "SOURCE_REPO=$(basename ${{ env.REPO_URL }})"       >> $GITHUB_ENV
      # -------------------------------------------------
      # 4️⃣ 缓存：下载、工具链、feeds
      # -------------------------------------------------
      - name: Cache Downloads
        uses: actions/cache@v4
        with:
          path: openwrt/dl
          key: dl-${{ runner.os }}-${{ env.CACHE_VER }}-${{ env.REPO_BRANCH }}
          restore-keys: |
            dl-${{ runner.os }}-${{ env.CACHE_VER }}-
            dl-${{ runner.os }}-
      - name: Cache Toolchain
        uses: actions/cache@v4
        with:
          path: |
            openwrt/staging_dir/host
            openwrt/staging_dir/toolchain-*
          key: toolchain-${{ runner.os }}-${{ env.CACHE_VER }}-${{ env.REPO_BRANCH }}
          restore-keys: |
            toolchain-${{ runner.os }}-${{ env.CACHE_VER }}-
            toolchain-${{ runner.os }}-
      - name: Cache Feeds
        uses: actions/cache@v4
        with:
          path: openwrt/feeds
          key: feeds-${{ runner.os }}-${{ env.CACHE_VER }}-${{ env.REPO_BRANCH }}
          restore-keys: |
            feeds-${{ runner.os }}-${{ env.CACHE_VER }}-
            feeds-${{ runner.os }}-
      # -------------------------------------------------
      # 5️⃣ ccache
      # -------------------------------------------------
      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ccache-${{ runner.os }}-${{ env.CACHE_VER }}
          max-size: 10G
          compress: true
      # -------------------------------------------------
      # 6️⃣ 安装 LLVM（锁定 v14，兼容 OpenWrt 24.10）
      # -------------------------------------------------
      - name: Install LLVM (v14)
        uses: sbwml/actions@install-llvm
        with:
          version: 14
      # -------------------------------------------------
      # 7️⃣ 安装 feeds（使用自定义 feeds.conf.default）
      # -------------------------------------------------
      - name: Install Feeds
        run: |
          cd $OPENWRT_PATH
          # 只保留我们需要的 feed，避免后面 rm -rf
          curl -fsSL -o feeds.conf.default \
            https://raw.githubusercontent.com/grandway2025/Actions-OpenWrt/main/Customize/feeds/feeds.conf.default
          ./scripts/feeds update -a
          ./scripts/feeds install -a
      # -------------------------------------------------
      # 8️⃣ 加载自定义 .config + 运行 diy 脚本
      # -------------------------------------------------
      - name: Load Custom Configuration
        env:
          LAN: ${{ github.event.inputs.lan_addr }}
          ROOT_PASSWORD: ${{ github.event.inputs.root_password }}
        run: |
          echo "::group::Load custom configuration"
          cd $OPENWRT_PATH
          # 把根目录的 files（如果有）搬进源码树
          [[ -e ../files ]] && mv ../files ./files
          # 复制基准 .config
          cp ../${CONFIG_FILE} .config
          chmod +x $GITHUB_WORKSPACE/scripts/*.sh
          chmod +x $GITHUB_WORKSPACE/${DIY_SCRIPT}
          # 运行 diy 脚本（内部已处理所有可选插件）
          $GITHUB_WORKSPACE/${DIY_SCRIPT}
          # 如果你还有 preset‑* 脚本，保留下面两行；否则可删掉
          $GITHUB_WORKSPACE/scripts/preset-mihimo-core.sh $CLASH_KERNEL
          $GITHUB_WORKSPACE/scripts/preset-adguard-core.sh $CLASH_KERNEL
          # 最后一次 make defconfig，保证 .config 完整 
          make defconfig
          echo "::endgroup::"
          # 导出后续需要的变量（即使 diy 脚本已经写入，这里再补一次防止遗漏）
          DEVICE_TARGET=$(grep ^CONFIG_TARGET_BOARD .config | cut -d'"' -f2)
          DEVICE_SUBTARGET=$(grep ^CONFIG_TARGET_SUBTARGET .config | cut -d'"' -f2)
          echo "DEVICE_TARGET=$DEVICE_TARGET"   >> $GITHUB_ENV
          echo "DEVICE_SUBTARGET=$DEVICE_SUBTARGET" >> $GITHUB_ENV
          echo "IP_ADDR=${{ github.event.inputs.lan_addr }}" >> $GITHUB_ENV
          echo "ROOT_PASSWORD=${{ github.event.inputs.root_password }}" >> $GITHUB_ENV
          # 为 Release 生成唯一 Tag（加入官方 OpenWrt 最新 Release）
          latest_release=$(curl -fsSL "https://api.github.com/repos/${SOURCE_REPO}/releases/latest" \
            | jq -r .tag_name | sed 's/^v//')
          echo "latest_release=$latest_release" >> $GITHUB_ENV
      # -------------------------------------------------
      # 9️⃣ 分阶段构建（tools → toolchain → firmware）
      # -------------------------------------------------
      - name: Build tools
        timeout-minutes: 120
        run: |
          echo "::group::Build tools"
          cd $OPENWRT_PATH
          make tools/install -j$(nproc) || make tools/install -j1 V=s
          echo "::endgroup::"
      - name: Build toolchain
        timeout-minutes: 150
        run: |
          echo "::group::Build toolchain"
          cd $OPENWRT_PATH
          make toolchain/install -j$(nproc) || make toolchain/install -j1 V=s
          echo "::endgroup::"
      - name: Compile Firmware
        id: compile
        timeout-minutes: 180
        run: |
          echo "::group::Compile firmware"
          cd $OPENWRT_PATH
          export PATH="/usr/lib/ccache:$PATH"
          ccache -s
          make -j$(nproc) || make -j1 V=s
          ccache -s
          echo "status=success" >> $GITHUB_OUTPUT
          echo "FILE_DATE=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_ENV
          echo "KERNEL=$(cat *.manifest | grep ^kernel | cut -d- -f2 | tr -d ' ')" >> $GITHUB_ENV
          echo "::endgroup::"
      # -------------------------------------------------
      # 10️⃣ 检查磁盘 & 打包产物
      # -------------------------------------------------
      - name: Check space usage
        if: always()
        run: df -hT
      - name: Organise files
        if: steps.compile.outputs.status == 'success'
        run: |
          echo "::group::Organise files"
          cd $OPENWRT_PATH/bin/targets/*/*
          cat sha256sums
          cp $OPENWRT_PATH/.config build.config
          mkdir -p kernel
          mv -f packages/* kernel
          tar -Jcf kernel.tar.xz kernel   # 多线程 xz，体积更小
          rm -rf packages feeds.buildinfo version.buildinfo kernel
          echo "FIRMWARE_PATH=$PWD" >> $GITHUB_ENV
          echo "::endgroup::"
      # -------------------------------------------------
      # 11️⃣ 上传制品（可选 Bin 目录、固件）
      # -------------------------------------------------
      - name: Upload Bin Directory (optional)
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.SOURCE_REPO }}-bin-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}-${{ env.FILE_DATE }}
          path: ${{ env.OPENWRT_PATH }}/bin
      - name: Upload Firmware to Artifact (when not releasing)
        if: steps.compile.outputs.status == 'success' && env.FIRMWARE_RELEASE != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.SOURCE_REPO }}-firmware-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}-${{ env.FILE_DATE }}
          path: ${{ env.FIRMWARE_PATH }}
      # -------------------------------------------------
      # 12️⃣ 发布 Release（带唯一 tag）
      # -------------------------------------------------
      - name: Upload Firmware to Release
        if: steps.compile.outputs.status == 'success' && env.FIRMWARE_RELEASE == 'true'
        uses: ncipollo/release-action@v1.14.0
        with:
          name: ${{ env.FILE_DATE }}-${{ env.FIRMWARE_TAG }}-${{ env.latest_release }}
          tag: ${{ env.FIRMWARE_TAG }}-OpenWrt-${{ env.latest_release }}-${{ env.FILE_DATE }}
          token: ${{ secrets.GITHUB_TOKEN }}
          allowUpdates: true
          artifacts: ${{ env.FIRMWARE_PATH }}/*
          body: |
            **OpenWrt Mediatek mt7986 Firmware**
            - **平台**: ${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}
            - **源码 ${{ env.REPO_URL }}
            - **分支**: ${{ env.REPO_BRANCH }}
            - **内核**: ${{ env.KERNEL }}
            - **默认 IP**: ${{ env.IP_ADDR }}
            - **默认密码**: ${{ env.ROOT_PASSWORD }}
            - **OpenWrt 最新发行版**: ${{ env.latest_release }}
            ### 📒 编译信息
            - **提交者**: ${{ env.COMMIT_AUTHOR }}
            - **提交时间**: ${{ env.COMMIT_DATE }}
            - **提交信息**: ${{ env.COMMIT_MESSAGE }}
            - **Commit SHA**: ${{ env.COMMIT_HASH }}
