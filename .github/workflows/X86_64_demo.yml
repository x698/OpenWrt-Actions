name: 💻 X86_64_demo
on:
  workflow_dispatch:
    inputs:
      lan_addr:
        description: "设置默认 LAN 地址"
        default: "192.168.1.10"
        required: true
        type: string
      root_password:
        description: "默认 root 密码（可选，默认 password）"
        default: "password"
        required: false
        type: string
      docker:
        description: "编译 Docker"
        type: boolean
        default: true
      ssrp:
        description: "编译 ShadowSocksR Plus+"
        type: boolean
        default: true
      passwall:
        description: "编译 Passwall"
        type: boolean
        default: true
      nikki:
        description: "编译 Nikki"
        type: boolean
        default: true
      openclash:
        description: "编译 OpenClash"
        type: boolean
        default: true
      lucky:
        description: "编译 Lucky"
        type: boolean
        default: true
      oaf:
        description: "编译 OpenAppFilter"
        type: boolean
        default: true
env:
  REPO_URL: https://github.com/openwrt/openwrt.git
  REPO_BRANCH: openwrt-24.10
  CACHE_VER: v5 # 如果你想强制刷新缓存，可以修改这个值
  CONFIG_FILE: configs/x86_64.config
  DIY_SCRIPT: scripts/diy-x86_64.sh
  CLASH_KERNEL: amd64
  UPLOAD_BIN_DIR: false
  FIRMWARE_RELEASE: true
  FIRMWARE_TAG: X86_64
  
jobs:
  build:
    runs-on: ubuntu-24.04
    timeout-minutes: 360
    steps:
      - name: ⚡ Setup Environment
        run: |
          sudo timedatectl set-timezone Asia/Shanghai
          # 创建 ccache 配置目录
          mkdir -p $HOME/.ccache
          echo "max_size = 5.0G" > $HOME/.ccache/ccache.conf
          
          # 优化 Git 性能
          git config --global core.compression 0
          git config --global http.postBuffer 524288000
          git config --global http.lowSpeedLimit 0
          git config --global http.lowSpeedTime 999999
          
      - name: 📥 Checkout Main Repository
        uses: actions/checkout@main
        with:
          path: main-repo
          
      - name: 🗑️ Free Disk Space
        uses: sbwml/actions@free-disk
        with:
          build-mount-path: /builder
        
      # ========== 核心速度优化部分 ==========
      - name: 📦 Restore OpenWrt Source Cache
        id: cache-source
        uses: actions/cache@v4
        with:
          path: |
            openwrt
            !openwrt/.git/index.lock
            !openwrt/tmp
            !openwrt/logs
          key: openwrt-src-${{ env.REPO_BRANCH }}-${{ env.CACHE_VER }}-${{ hashFiles('main-repo/feeds.conf.default') }}
          restore-keys: |
            openwrt-src-${{ env.REPO_BRANCH }}-${{ env.CACHE_VER }}-
            openwrt-src-${{ env.REPO_BRANCH }}-
      
      - name: ⚡ Fast Clone OpenWrt (if no cache)
        if: steps.cache-source.outputs.cache-hit != 'true'
        run: |
          echo "🚀 No cache found, performing fast clone..."
          # 使用最快的克隆参数
          git clone \
            --depth 1 \
            --filter=tree:0 \
            --single-branch \
            --branch ${{ env.REPO_BRANCH }} \
            --no-tags \
            --recurse-submodules=no \
            ${{ env.REPO_URL }} openwrt
          
          # 进入目录并优化配置
          cd openwrt
          git config core.compression 0
          git config core.checkStat minimal
          git config core.untrackedCache true
          git config feature.manyFiles true
          echo "✅ Fast clone completed"
          
      - name: 🔄 Update OpenWrt (if cached)
        if: steps.cache-source.outputs.cache-hit == 'true'
        working-directory: openwrt
        run: |
          echo "📦 Cache found, updating to latest..."
          git fetch --depth 1 --no-tags origin ${{ env.REPO_BRANCH }}
          git reset --hard origin/${{ env.REPO_BRANCH }}
          git clean -fdx
          echo "✅ Update completed"
          
      - name: 🛠️ Build System Setup
        uses: sbwml/actions@openwrt-build-setup
        
      - name: 📦 Install LLVM
        uses: sbwml/actions@install-llvm
        
      - name: 📊 Set up Build Variables
        id: setup_vars
        run: |
          cd openwrt
          echo "OPENWRT_PATH=$PWD" >> $GITHUB_ENV
          
          # 将 Commit 信息格式化并写入 GITHUB_ENV
          echo "COMMIT_AUTHOR=$(git show -s --format='作者: %an')" >> $GITHUB_ENV
          echo "COMMIT_DATE=$(git show -s --format='时间: %ci')" >> $GITHUB_ENV
          echo "COMMIT_MESSAGE=$(git show -s --format='内容: %s')" >> $GITHUB_ENV
          echo "COMMIT_HASH=$(git show -s --format='hash: %H')" >> $GITHUB_ENV
          echo "CURRENT_DATE=$(date +%s)" >> $GITHUB_ENV
          
          # 获取最新稳定版 Tag
          latest_release=$(curl -s "https://api.github.com/repos/openwrt/openwrt/tags" | jq -r '.[].name' | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -n 1 | sed 's/^v//')
          if [ -z "$latest_release" ]; then
            echo "::warning::Failed to fetch latest tag, using fallback."
            latest_release="24.10.x"
          fi
          echo "latest_release=$latest_release" >> $GITHUB_ENV
          echo "Latest release tag determined: $latest_release"
          
      # ========== 缓存优化部分 ==========
      - name: 💾 Cache Downloads
        uses: actions/cache@v4
        with:
          path: openwrt/dl
          key: dl-${{ runner.os }}-${{ env.CACHE_VER }}-${{ env.REPO_BRANCH }}-${{ hashFiles('main-repo/configs/**.config', 'main-repo/config-*.txt') }}
          restore-keys: |
            dl-${{ runner.os }}-${{ env.CACHE_VER }}-${{ env.REPO_BRANCH }}-
            dl-${{ runner.os }}-${{ env.CACHE_VER }}-
            
      - name: 🔧 Cache Toolchain
        uses: actions/cache@v4
        with:
          path: |
            openwrt/staging_dir/toolchain-*
            openwrt/staging_dir/host
            openwrt/build_dir/toolchain-*
          key: toolchain-${{ runner.os }}-${{ env.CACHE_VER }}-${{ env.REPO_BRANCH }}-${{ hashFiles('main-repo/configs/**.config') }}
          restore-keys: |
            toolchain-${{ runner.os }}-${{ env.CACHE_VER }}-${{ env.REPO_BRANCH }}-
            toolchain-${{ runner.os }}-${{ env.CACHE_VER }}-
            
      - name: 🔨 Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ccache-${{ runner.os }}-${{ env.CACHE_VER }}-${{ env.REPO_BRANCH }}-${{ hashFiles('main-repo/configs/**.config', 'main-repo/config-*.txt') }}
          max-size: 5G
          
      - name: 📦 Cache Feeds
        uses: actions/cache@v4
        with:
          path: |
            openwrt/feeds
            openwrt/package/feeds
          key: feeds-${{ runner.os }}-${{ env.CACHE_VER }}-${{ env.REPO_BRANCH }}-${{ hashFiles('main-repo/feeds.conf.default') }}
          restore-keys: |
            feeds-${{ runner.os }}-${{ env.CACHE_VER }}-${{ env.REPO_BRANCH }}-
            
      # ========== 构建步骤 ==========
      - name: 📥 Install Feeds
        run: |
          cd ${{ env.OPENWRT_PATH }}
          # 拷贝 feeds 配置
          if [ -f "${{ github.workspace }}/main-repo/feeds.conf.default" ]; then
            cp ${{ github.workspace }}/main-repo/feeds.conf.default .
          else
            echo "::warning::feeds.conf.default not found in main-repo. Using default OpenWrt feeds."
          fi
          
          # 并行更新 feeds 以加速
          ./scripts/feeds update -a -j$(nproc)
          ./scripts/feeds install -a -j$(nproc)
          
      - name: ⚙️ Load Custom Configuration & DIY Script
        env:
          LAN: ${{ github.event.inputs.lan_addr }}
          ROOT_PASSWORD: ${{ github.event.inputs.root_password }}
          ENABLE_DOCKER: ${{ github.event.inputs.docker }}
          ENABLE_SSRP: ${{ github.event.inputs.ssrp }}
          ENABLE_PASSWALL: ${{ github.event.inputs.passwall }}
          ENABLE_NIKKI: ${{ github.event.inputs.nikki }}
          ENABLE_OPENCLASH: ${{ github.event.inputs.openclash }}
          ENABLE_LUCKY: ${{ github.event.inputs.lucky }}
          ENABLE_OAF: ${{ github.event.inputs.oaf }}
        run: |
          cd ${{ env.OPENWRT_PATH }}
          
          # 拷贝基础配置
          cp ${{ github.workspace }}/main-repo/${{ env.CONFIG_FILE }} .config
          
          # 根据选项添加额外配置
          [[ "$ENABLE_DOCKER"    == "true" && -f "${{ github.workspace }}/main-repo/configs/config-docker.txt" ]] && cat ${{ github.workspace }}/main-repo/configs/config-docker.txt >> .config
          [[ "$ENABLE_SSRP"      == "true" && -f "${{ github.workspace }}/main-repo/configs/config-ssrp.txt" ]] && cat ${{ github.workspace }}/main-repo/configs/config-ssrp.txt >> .config
          [[ "$ENABLE_PASSWALL"  == "true" && -f "${{ github.workspace }}/main-repo/configs/config-passwall.txt" ]] && cat ${{ github.workspace }}/main-repo/configs/config-passwall.txt >> .config
          [[ "$ENABLE_NIKKI"     == "true" && -f "${{ github.workspace }}/main-repo/configs/config-nikki.txt" ]] && cat ${{ github.workspace }}/main-repo/configs/config-nikki.txt >> .config
          [[ "$ENABLE_OPENCLASH" == "true" && -f "${{ github.workspace }}/main-repo/configs/config-openclash.txt" ]] && cat ${{ github.workspace }}/main-repo/configs/config-openclash.txt >> .config
          [[ "$ENABLE_LUCKY"     == "true" && -f "${{ github.workspace }}/main-repo/configs/config-lucky.txt" ]] && cat ${{ github.workspace }}/main-repo/configs/config-lucky.txt >> .config
          [[ "$ENABLE_OAF"       == "true" && -f "${{ github.workspace }}/main-repo/configs/config-oaf.txt" ]] && cat ${{ github.workspace }}/main-repo/configs/config-oaf.txt >> .config          
          # ... 你可以在这里继续添加其他插件的 cat 命令 ...          
          # 执行主 DIY 脚本
          chmod +x ${{ github.workspace }}/main-repo/${{ env.DIY_SCRIPT }}
          ${{ github.workspace }}/main-repo/${{ env.DIY_SCRIPT }}
          
          # 这两个脚本应该位于你的主仓库的 scripts/ 目录下
          # 确保脚本有可执行权限
          chmod +x ${{ github.workspace }}/main-repo/scripts/preset-mihimo-core.sh
          chmod +x ${{ github.workspace }}/main-repo/scripts/preset-adguard-core.sh
          # 执行下载
          ${{ github.workspace }}/main-repo/scripts/preset-mihimo-core.sh ${{ env.CLASH_KERNEL }}
          ${{ github.workspace }}/main-repo/scripts/preset-adguard-core.sh ${{ env.CLASH_KERNEL }}
          
          # 生成最终 .config
          make defconfig
          
          # 提取最终环境变量
          DEVICE_TARGET=$(grep -E "^CONFIG_TARGET_[a-zA-Z0-9_]+=" .config | grep -E "=y$" | head -n1 | sed -r 's/CONFIG_TARGET_(.*)=y/\1/' | sed -r 's/(_[a-zA-Z0-9_]+)$//')
          DEVICE_SUBTARGET=$(grep -E "^CONFIG_TARGET_${DEVICE_TARGET}_[a-zA-Z0-9_]+=" .config | grep -E "=y$" | head -n1 | sed -r "s/CONFIG_TARGET_${DEVICE_TARGET}_(.*)=y/\1/")
          echo "DEVICE_TARGET=$DEVICE_TARGET" >> $GITHUB_ENV
          echo "DEVICE_SUBTARGET=$DEVICE_SUBTARGET" >> $GITHUB_ENV
          echo "IP_ADDR=${{ env.LAN }}" >> $GITHUB_ENV
          
      - name: 📥 Download Packages
        run: |
          cd ${{ env.OPENWRT_PATH }}
          # 并行下载以加速
          make download -j$(nproc)
          # 检查下载完整性
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;
          
      - name: 🔨 Compile Firmware
        id: compile
        run: |
          cd ${{ env.OPENWRT_PATH }}
          echo -e "🚀 Starting compile with $(nproc) threads"
          
          # 设置编译优化
          export CCACHE_DIR=$HOME/.ccache
          export PATH="/usr/lib/ccache:$PATH"
          
          # 编译
          make -j$(nproc) || make -j1 || make -j1 V=s
          
          echo "status=success" >> $GITHUB_OUTPUT
          echo "FILE_DATE=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_ENV
          echo "KERNEL=$(cat bin/targets/*/*/openwrt-*.manifest | grep '^kernel' | head -n1 | awk '{print $3}' | awk -F- '{print $2}')" >> $GITHUB_ENV
          
      - name: 💾 Check Space Usage
        if: always()
        run: df -hT
        
      - name: 📁 Organize Files
        if: steps.compile.outputs.status == 'success'
        run: |
          cd ${{ env.OPENWRT_PATH }}/bin/targets/*/*
          rm -f sha256sums packages*
          cp ${{ env.OPENWRT_PATH }}/.config build.config
          echo "FIRMWARE_PATH=$PWD" >> $GITHUB_ENV
          
      - name: 📤 Upload Bin Directory (optional)
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: openwrt-bin-${{ env.FILE_DATE }}
          path: ${{ env.OPENWRT_PATH }}/bin
          
      - name: 📤 Upload Firmware to Artifact
        if: steps.compile.outputs.status == 'success' && env.FIRMWARE_RELEASE != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: openwrt-firmware-${{ env.FILE_DATE }}
          path: ${{ env.FIRMWARE_PATH }}
          
      - name: 🚀 Upload Firmware to Release
        if: steps.compile.outputs.status == 'success' && env.FIRMWARE_RELEASE == 'true'
        uses: ncipollo/release-action@v1.14.0
        with:
          name: Release ${{ env.FILE_DATE }}
          tag: ${{ env.FIRMWARE_TAG }}-${{ env.FILE_DATE }}
          token: ${{ secrets.GITHUB_TOKEN }}
          allowUpdates: true
          artifacts: ${{ env.FIRMWARE_PATH }}/*
          body: |
            **This is OpenWrt Firmware built by GitHub Actions**
            ### 📒 Firmware Information
            - 💻 **Architecture:** `${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}`
            - 🌐 **Default IP:** `${{ env.IP_ADDR }}`
            - 🔑 **Default Password:** `${{ github.event.inputs.root_password }}`
            - 🚀 **Kernel Version:** `${{ env.KERNEL }}`
            
            ### 🧊 Source Code Version
            - **Source:** `${{ env.REPO_URL }}` (Branch: `${{ env.REPO_BRANCH }}`)
            - **Latest Commit:**
              - `${{ env.COMMIT_AUTHOR }}`
              - `${{ env.COMMIT_DATE }}`
              - `${{ env.COMMIT_MESSAGE }}`
              - `${{ env.COMMIT_HASH }}`
