# 🚀 OpenWrt 编译最优方案 - 完整版
# 解决首次编译超时 + 提升缓存命中率至75%+
# Author: 优化版本 v2.0
name: 💻 Build OpenWrt (x86_64)
permissions:
  contents: write
  actions: read
on:
  workflow_dispatch:
    inputs:
      lan_addr:
        description: "📍 默认 LAN 地址"
        default: "192.168.1.200"
        required: true
        type: string
      root_password:
        description: "🔑 Root 密码"
        default: "password"
        required: false
        type: string
      docker:
        description: "🐋 Docker 支持"
        type: boolean
        default: true
      ssrp:
        description: "🚀 ShadowSocksR Plus+"
        type: boolean
        default: true
      passwall:
        description: "🌐 Passwall"
        type: boolean
        default: true
      nikki:
        description: "📦 Nikki"
        type: boolean
        default: true
      openclash:
        description: "⚡ OpenClash"
        type: boolean
        default: true
      lucky:
        description: "🍀 Lucky"
        type: boolean
        default: true
      oaf:
        description: "🛡️ OpenAppFilter"
        type: boolean
        default: true
      compile_mode:
        description: "🔨 编译模式"
        type: choice
        options:
          - "fast"      # 快速模式（分阶段）
          - "standard"  # 标准模式
          - "full"      # 完整模式
        default: "fast"
env:
  REPO_URL: https://github.com/openwrt/openwrt
  REPO_BRANCH: openwrt-24.10
  CONFIG_FILE: configs/x86_64.config
  DIY_SCRIPT: scripts/diy-x86_64_demo.sh
  FEEDS_CONF: feeds.conf.default
  CLASH_KERNEL: amd64
  UPLOAD_ARTIFACTS: false
  UPLOAD_RELEASE: true
  FIRMWARE_TAG: X86_64
  TZ: Asia/Shanghai
  DEBIAN_FRONTEND: noninteractive
concurrency:
  group: openwrt-build-${{ github.ref }}-${{ github.event.inputs.compile_mode }}
  cancel-in-progress: true
jobs:
  # ============================================
  # 📋 预检查阶段 - 智能决策编译策略
  # ============================================
  pre-check:
    name: 📋 预检查与策略决策
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      should_build: ${{ steps.decision.outputs.should_build }}
      compile_strategy: ${{ steps.decision.outputs.strategy }}
      cache_key_base: ${{ steps.cache-key.outputs.base }}
      config_hash: ${{ steps.cache-key.outputs.config_hash }}
      feeds_hash: ${{ steps.cache-key.outputs.feeds_hash }}
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: 🧠 生成智能缓存键
        id: cache-key
        run: |
          # 🎯 基于文件内容生成稳定缓存键
          CONFIG_HASH=$(sha256sum configs/x86_64.config | cut -c1-12)
          FEEDS_HASH=$(sha256sum feeds.conf.default 2>/dev/null | cut -c1-8 || echo "default")
          
          # 🔄 月度刷新策略
          MONTH_KEY=$(date +'%Y%m')
          WEEK_KEY=$(date +'%Y%U')
          
          # 🎯 插件组合hash（仅用于显示）
          PLUGINS_CONFIG="${{ github.event.inputs.docker }}-${{ github.event.inputs.ssrp }}-${{ github.event.inputs.passwall }}-${{ github.event.inputs.openclash }}-${{ github.event.inputs.nikki }}-${{ github.event.inputs.lucky }}-${{ github.event.inputs.oaf }}"
          PLUGINS_HASH=$(echo "$PLUGINS_CONFIG" | sha256sum | cut -c1-8)
          
          # 基础缓存键（稳定不变）
          CACHE_BASE="${{ env.REPO_BRANCH }}-${CONFIG_HASH}-${MONTH_KEY}"
          
          {
            echo "base=$CACHE_BASE"
            echo "config_hash=$CONFIG_HASH"
            echo "feeds_hash=$FEEDS_HASH"
            echo "month_key=$MONTH_KEY"
            echo "week_key=$WEEK_KEY"
            echo "plugins_hash=$PLUGINS_HASH"
          } >> $GITHUB_OUTPUT
          
          echo "🎯 缓存策略信息:"
          echo "  配置Hash: $CONFIG_HASH"
          echo "  Feeds Hash: $FEEDS_HASH"
          echo "  插件Hash: $PLUGINS_HASH"
          echo "  缓存基础键: $CACHE_BASE"
      - name: 🤔 编译策略决策
        id: decision
        run: |
          STRATEGY="${{ github.event.inputs.compile_mode }}"
          
          # 根据输入决定编译策略
          case "$STRATEGY" in
            "fast")
              echo "🚀 选择快速编译模式（分阶段）"
              echo "strategy=staged" >> $GITHUB_OUTPUT
              ;;
            "standard") 
              echo "⚖️ 选择标准编译模式"
              echo "strategy=standard" >> $GITHUB_OUTPUT
              ;;
            "full")
              echo "🔥 选择完整编译模式"
              echo "strategy=full" >> $GITHUB_OUTPUT
              ;;
          esac
          
          echo "should_build=true" >> $GITHUB_OUTPUT
  # ============================================
  # 🔧 工具链预编译阶段（仅快速模式）
  # ============================================
  prepare-toolchain:
    name: 🔧 预编译工具链
    if: needs.pre-check.outputs.compile_strategy == 'staged'
    needs: pre-check
    runs-on: ubuntu-24.04
    timeout-minutes: 280  # 4小时40分钟
    outputs:
      toolchain_ready: ${{ steps.toolchain.outputs.ready }}
      toolchain_cache_hit: ${{ steps.cache-toolchain.outputs.cache-hit }}
    steps:
      - name: 🧹 释放磁盘空间
        uses: sbwml/actions@free-disk
      - name: 📥 Checkout
        uses: actions/checkout@v4
      - name: 🛠️ 构建系统设置
        uses: sbwml/actions@openwrt-build-setup
      - name: 📦 安装 LLVM
        uses: sbwml/actions@install-llvm
      - name: 💾 内存与交换优化
        run: |
          # 创建更大的交换空间
          sudo fallocate -l 12G /swapfile
          sudo chmod 600 /swapfile
          sudo mkswap /swapfile
          sudo swapon /swapfile
          
          # 优化内存参数
          sudo tee -a /etc/sysctl.conf >/dev/null <<EOF
          vm.swappiness=5
          vm.vfs_cache_pressure=40
          vm.dirty_ratio=20
          vm.dirty_background_ratio=10
          vm.overcommit_memory=1
          EOF
          sudo sysctl -p
          
          echo "💾 内存状态:"
          free -h
      - name: 📥 准备 OpenWrt 源码
        run: |
          echo "📥 克隆 OpenWrt 源码..."
          for attempt in 1 2 3; do
            if git clone --depth=1 "$REPO_URL" -b "$REPO_BRANCH" openwrt; then
              break
            fi
            echo "❌ 第 $attempt 次克隆失败"
            rm -rf openwrt
            [ $attempt -lt 3 ] && sleep 15
          done
          
          cd openwrt
          echo "OPENWRT_PATH=$PWD" >> $GITHUB_ENV
          
          # 获取提交信息
          COMMIT_HASH=$(git rev-parse HEAD)
          COMMIT_DATE=$(git log -1 --format="%ci")
          echo "COMMIT_HASH=$COMMIT_HASH" >> $GITHUB_ENV
          echo "COMMIT_DATE=$COMMIT_DATE" >> $GITHUB_ENV
      - name: 📚 配置 Feeds
        run: |
          cd "$OPENWRT_PATH"
          
          # 清理并配置 feeds
          rm -rf feeds tmp/packagecache
          
          if [ -f "${{ github.workspace }}/feeds.conf.default" ]; then
            cp "${{ github.workspace }}/feeds.conf.default" .
            echo "📄 Using custom feeds.conf.default"
          else
            echo "::warning::feeds.conf.default not found, using upstream defaults."
          fi
          
          ./scripts/feeds update -a
          ./scripts/feeds install -a
      - name: ☁️ 工具链缓存
        id: cache-toolchain
        uses: actions/cache@v4
        with:
          path: |
            openwrt/staging_dir/toolchain-*
            openwrt/build_dir/toolchain-*
            openwrt/staging_dir/host*
            openwrt/staging_dir/hostpkg
          key: toolchain-ultimate-${{ needs.pre-check.outputs.cache_key_base }}-v15
          restore-keys: |
            toolchain-ultimate-${{ needs.pre-check.outputs.cache_key_base }}-
            toolchain-ultimate-${{ env.REPO_BRANCH }}-${{ needs.pre-check.outputs.config_hash }}-
      - name: 🎨 应用配置
        run: |
          cd "$OPENWRT_PATH"
          
          # 复制配置文件
          cp "${{ github.workspace }}/$CONFIG_FILE" .config
          
          # 执行自定义脚本
          if [ -f "${{ github.workspace }}/$DIY_SCRIPT" ]; then
            chmod +x "${{ github.workspace }}/$DIY_SCRIPT"
            "${{ github.workspace }}/$DIY_SCRIPT"
          fi
          
          # 生成配置
          make defconfig
          
          # 提取目标信息
          DEVICE_TARGET=$(awk -F'"' '/^CONFIG_TARGET_BOARD=/{print $2}' .config || echo "x86")
          DEVICE_SUBTARGET=$(awk -F'"' '/^CONFIG_TARGET_SUBTARGET=/{print $2}' .config || echo "64")
          echo "DEVICE_TARGET=$DEVICE_TARGET" >> $GITHUB_ENV
          echo "DEVICE_SUBTARGET=$DEVICE_SUBTARGET" >> $GITHUB_ENV
      - name: 🔨 编译工具链
        id: toolchain
        timeout-minutes: 240
        run: |
          cd "$OPENWRT_PATH"
          
          echo "🔨 开始工具链编译 ($(date))"
          echo "💻 CPU核心: $(nproc)"
          echo "💾 可用内存: $(free -h | grep '^Mem:' | awk '{print $7}')"
          
          # 检查缓存命中
          if [ "${{ steps.cache-toolchain.outputs.cache-hit }}" == "true" ]; then
            echo "🎯 工具链缓存命中，跳过编译"
            echo "ready=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # 编译工具链
          echo "🔨 编译 tools..."
          make tools/compile -j$(nproc) || make tools/compile -j1 V=s
          
          echo "🔨 编译 toolchain..."
          make toolchain/compile -j$(nproc) || make toolchain/compile -j1 V=s
          
          echo "✅ 工具链编译完成"
          echo "ready=true" >> $GITHUB_OUTPUT
  # ============================================
  # 🏗️ 主编译阶段
  # ============================================
  build-firmware:
    name: 🏗️ 编译 OpenWrt 固件
    needs: [pre-check, prepare-toolchain]
    if: |
      always() && 
      needs.pre-check.outputs.should_build == 'true' && 
      (needs.prepare-toolchain.result == 'success' || needs.prepare-toolchain.result == 'skipped')
    runs-on: ubuntu-24.04
    timeout-minutes: 240
    outputs:
      firmware_path: ${{ steps.organize.outputs.firmware_path }}
      kernel_version: ${{ steps.organize.outputs.kernel_version }}
      compile_status: ${{ steps.compile.outputs.status }}
    steps:
      # ============================================
      # 环境准备
      # ============================================
      - name: 🧹 释放磁盘空间
        uses: sbwml/actions@free-disk
      - name: 📥 Checkout
        uses: actions/checkout@v4
      - name: 🛠️ 构建系统设置
        uses: sbwml/actions@openwrt-build-setup
      - name: 📦 安装 LLVM
        uses: sbwml/actions@install-llvm
      - name: 💾 系统优化
        run: |
          # 内存优化
          sudo fallocate -l 12G /swapfile
          sudo chmod 600 /swapfile
          sudo mkswap /swapfile
          sudo swapon /swapfile
          
          # 系统参数优化
          sudo tee -a /etc/sysctl.conf >/dev/null <<EOF
          vm.swappiness=5
          vm.vfs_cache_pressure=40
          vm.dirty_ratio=20
          vm.dirty_background_ratio=10
          vm.overcommit_memory=1
          kernel.pid_max=4194304
          EOF
          sudo sysctl -p
          
          # 文件描述符限制
          echo "* soft nofile 65536" | sudo tee -a /etc/security/limits.conf
          echo "* hard nofile 65536" | sudo tee -a /etc/security/limits.conf
          
          # 清理不必要的软件包
          sudo apt-get autoremove -y
          sudo apt-get clean
          
          echo "📊 系统资源状态:"
          echo "💾 内存: $(free -h | grep '^Mem:' | awk '{print $2 " total, " $7 " available"}')"
          echo "💿 磁盘: $(df -h / | tail -1 | awk '{print $4 " available"}')"
          echo "🔧 CPU: $(nproc) cores"
      - name: ⏰ 构建信息初始化
        run: |
          # 构建信息
          BUILD_START_TIME=$(date +%s)
          VERSION=$(date +'%Y.%m.%d')
          DATE=$(date +'%Y-%m-%d %H:%M:%S')
          BUILD_ID="${{ github.run_number }}-${GITHUB_SHA::7}"
          FILE_DATE=$(date +'%Y.%m.%d-%H%M')
          
          # 自动并行计算
          PROC_COUNT=$(nproc)
          MEM_GB=$(($(free -m | awk '/^Mem:/{print $2}') / 1024))
          JOBS=$((MEM_GB / 3))  # 更保守的内存计算
          JOBS=$((JOBS > PROC_COUNT ? PROC_COUNT : JOBS))
          JOBS=$((JOBS < 1 ? 1 : JOBS))
          
          {
            echo "BUILD_START_TIME=$BUILD_START_TIME"
            echo "BUILD_VERSION=$VERSION"
            echo "BUILD_DATE=$DATE"
            echo "BUILD_ID=$BUILD_ID"
            echo "FILE_DATE=$FILE_DATE"
            echo "COMPILE_JOBS=$JOBS"
          } >> $GITHUB_ENV
          
          echo "🚀 构建信息:"
          echo "  版本: $VERSION"
          echo "  时间: $DATE"
          echo "  ID: $BUILD_ID"
          echo "  并行数: $JOBS"
          echo "  编译策略: ${{ needs.pre-check.outputs.compile_strategy }}"
      # ============================================
      # 源码准备
      # ============================================
      - name: 📥 准备 OpenWrt 源码
        run: |
          echo "📥 克隆 OpenWrt 源码..."
          
          for attempt in 1 2 3; do
            if git clone --depth=1 "$REPO_URL" -b "$REPO_BRANCH" openwrt; then
              break
            fi
            echo "❌ 第 $attempt 次克隆失败"
            rm -rf openwrt
            [ $attempt -lt 3 ] && sleep 15
          done
          
          cd openwrt
          echo "OPENWRT_PATH=$PWD" >> $GITHUB_ENV
          
          # 获取提交信息
          COMMIT_INFO=$(git log -1 --pretty=format:'%an|%ci|%s|%H')
          IFS='|' read -r AUTHOR COMMIT_DATE MESSAGE HASH <<< "$COMMIT_INFO"
          
          {
            echo "COMMIT_AUTHOR=${AUTHOR}"
            echo "COMMIT_DATE=${COMMIT_DATE}"
            echo "COMMIT_MESSAGE=${MESSAGE}"
            echo "COMMIT_HASH=${HASH}"
          } >> $GITHUB_ENV
      - name: 📚 配置 Feeds
        run: |
          cd "$OPENWRT_PATH"
          
          rm -rf feeds tmp/packagecache
          
          if [ -f "${{ github.workspace }}/feeds.conf.default" ]; then
            cp "${{ github.workspace }}/feeds.conf.default" .
            echo "📄 Using custom feeds.conf.default"
          else
            echo "::warning::feeds.conf.default not found, using upstream defaults."
          fi
          
          echo "🔄 更新 feeds..."
          ./scripts/feeds update -a
          echo "📦 安装 feeds..."
          ./scripts/feeds install -a
      # ============================================
      # 高级缓存策略
      # ============================================
      - name: ☁️ 工具链缓存（继承/独立）
        if: needs.pre-check.outputs.compile_strategy != 'staged'
        uses: actions/cache@v4
        with:
          path: |
            openwrt/staging_dir/toolchain-*
            openwrt/build_dir/toolchain-*
          key: toolchain-ultimate-${{ needs.pre-check.outputs.cache_key_base }}-v15
          restore-keys: |
            toolchain-ultimate-${{ needs.pre-check.outputs.cache_key_base }}-
            toolchain-ultimate-${{ env.REPO_BRANCH }}-${{ needs.pre-check.outputs.config_hash }}-
      - name: ☁️ Host 工具缓存
        uses: actions/cache@v4
        with:
          path: |
            openwrt/staging_dir/host*
            openwrt/staging_dir/hostpkg
          key: hosttools-${{ needs.pre-check.outputs.cache_key_base }}-v12
          restore-keys: |
            hosttools-${{ needs.pre-check.outputs.cache_key_base }}-
            hosttools-${{ env.REPO_BRANCH }}-${{ needs.pre-check.outputs.config_hash }}-
      - name: ☁️ 构建依赖缓存
        uses: actions/cache@v4
        with:
          path: |
            openwrt/build_dir/host*
          key: buildhost-${{ needs.pre-check.outputs.cache_key_base }}-v10
          restore-keys: |
            buildhost-${{ needs.pre-check.outputs.cache_key_base }}-
            buildhost-${{ env.REPO_BRANCH }}-${{ needs.pre-check.outputs.config_hash }}-
      - name: ☁️ 下载缓存
        uses: actions/cache@v4
        with:
          path: openwrt/dl
          key: downloads-${{ env.REPO_BRANCH }}-${{ needs.pre-check.outputs.config_hash }}-v8
          restore-keys: |
            downloads-${{ env.REPO_BRANCH }}-${{ needs.pre-check.outputs.config_hash }}-
            downloads-${{ env.REPO_BRANCH }}-
      - name: ☁️ ccache 编译缓存
        if: github.event.inputs.force_clean != 'true'
        uses: actions/cache@v4
        with:
          path: openwrt/.ccache
          key: ccache-${{ needs.pre-check.outputs.cache_key_base }}-${{ github.run_number }}-v12
          restore-keys: |
            ccache-${{ needs.pre-check.outputs.cache_key_base }}-
            ccache-${{ env.REPO_BRANCH }}-${{ needs.pre-check.outputs.config_hash }}-
      # ============================================
      # ccache 优化配置
      # ============================================
      - name: 🎯 ccache 高性能配置
        run: |
          cd "$OPENWRT_PATH"
          
          export USE_CCACHE=1
          export CCACHE_DIR="$PWD/.ccache"
          export PATH="/usr/lib/ccache:$PATH"
          
          mkdir -p "$CCACHE_DIR"
          
          # 🚀 激进的ccache配置
          ccache -M 30G  # 30GB 缓存
          ccache -F 800000  # 80万文件
          
          # 🎯 高命中率配置
          ccache --set-config=compression=true
          ccache --set-config=compression_level=1
          ccache --set-config=stats=true
          ccache --set-config=max_files=800000
          
          # 🔥 核心优化参数
          ccache --set-config=sloppiness=file_macro,locale,time_macros,include_file_ctime,file_stat_matches,include_file_mtime,pch_defines
          ccache --set-config=hash_dir=false
          ccache --set-config=direct_mode=true
          ccache --set-config=base_dir="$PWD"
          ccache --set-config=temporary_dir="/tmp"
          ccache --set-config=run_second_cpp=false
          ccache --set-config=cpp_extension=true
          
          # 清理维护
          ccache --cleanup >/dev/null 2>&1 || true
          
          echo "📊 ccache 配置:"
          ccache --show-config | grep -E "(max_size|max_files|compression|direct_mode)" || echo "配置应用中..."
          echo "📊 初始统计:"
          ccache -s 2>/dev/null || echo "ccache 初始化中..."
      # ============================================
      # 配置应用
      # ============================================
      - name: 🎨 应用自定义配置
        env:
          LAN: ${{ github.event.inputs.lan_addr }}
          ROOT_PASSWORD: ${{ github.event.inputs.root_password }}
          ENABLE_DOCKER: ${{ github.event.inputs.docker == 'true' && 'y' || 'n' }}
          ENABLE_SSRP: ${{ github.event.inputs.ssrp == 'true' && 'y' || 'n' }}
          ENABLE_PASSWALL: ${{ github.event.inputs.passwall == 'true' && 'y' || 'n' }}
          ENABLE_NIKKI: ${{ github.event.inputs.nikki == 'true' && 'y' || 'n' }}
          ENABLE_OPENCLASH: ${{ github.event.inputs.openclash == 'true' && 'y' || 'n' }}
          ENABLE_LUCKY: ${{ github.event.inputs.lucky == 'true' && 'y' || 'n' }}
          ENABLE_OAF: ${{ github.event.inputs.oaf == 'true' && 'y' || 'n' }}
        run: |
          cd "$OPENWRT_PATH"
          
          # 复制自定义文件
          if [ -d "$GITHUB_WORKSPACE/files" ]; then
            cp -r "$GITHUB_WORKSPACE/files" .
          fi
          
          # 应用配置文件
          cp "${{ github.workspace }}/$CONFIG_FILE" .config
          
          # 执行自定义脚本
          if [ -f "${{ github.workspace }}/$DIY_SCRIPT" ]; then
            chmod +x "${{ github.workspace }}/$DIY_SCRIPT"
            "${{ github.workspace }}/$DIY_SCRIPT"
          fi
          
          # 执行预设脚本
          for script in preset-mihimo-core.sh preset-adguard-core.sh; do
            if [ -f "${{ github.workspace }}/scripts/$script" ]; then
              chmod +x "${{ github.workspace }}/scripts/$script"
              "${{ github.workspace }}/scripts/$script" "$CLASH_KERNEL"
            fi
          done
          
          # 生成最终配置
          make defconfig
          
          # 提取目标信息
          DEVICE_TARGET=$(awk -F'"' '/^CONFIG_TARGET_BOARD=/{print $2}' .config || echo "x86")
          DEVICE_SUBTARGET=$(awk -F'"' '/^CONFIG_TARGET_SUBTARGET=/{print $2}' .config || echo "64")
          
          {
            echo "DEVICE_TARGET=$DEVICE_TARGET"
            echo "DEVICE_SUBTARGET=$DEVICE_SUBTARGET"
          } >> $GITHUB_ENV
          
          echo "🎯 构建目标: $DEVICE_TARGET-$DEVICE_SUBTARGET"
          echo "📦 插件状态:"
          echo "  Docker: $ENABLE_DOCKER"
          echo "  SSRP: $ENABLE_SSRP"
          echo "  Passwall: $ENABLE_PASSWALL"
          echo "  OpenClash: $ENABLE_OPENCLASH"
          echo "  其他: Nikki($ENABLE_NIKKI), Lucky($ENABLE_LUCKY), OAF($ENABLE_OAF)"
      # ============================================
      # 强制清理（可选）
      # ============================================
      - name: 🧹 强制清理构建目录
        if: github.event.inputs.force_clean == 'true'
        run: |
          cd "$OPENWRT_PATH"
          echo "🧹 执行强制清理..."
          
          cp .config .config.backup
          make dirclean
          cp .config.backup .config
          make defconfig
          
          # 清理ccache
          export CCACHE_DIR="$PWD/.ccache"
          ccache -C
          
          echo "✅ 强制清理完成"
      # ============================================
      # 下载依赖
      # ============================================
      - name: 📥 下载依赖包
        timeout-minutes: 30
        run: |
          cd "$OPENWRT_PATH"
          
          echo "📥 开始下载依赖包..."
          
          # 优化下载并行度
          DOWNLOAD_JOBS=$((COMPILE_JOBS * 2))
          DOWNLOAD_JOBS=$((DOWNLOAD_JOBS > 16 ? 16 : DOWNLOAD_JOBS))
          
          # 重试机制的下载
          for attempt in 1 2 3; do
            echo "📥 下载尝试 $attempt/3 (并行度: $DOWNLOAD_JOBS)"
            
            if make download -j"$DOWNLOAD_JOBS" 2>&1 | tee download.log; then
              echo "✅ 下载完成"
              break
            else
              echo "❌ 下载失败，尝试重新下载..."
              [ $attempt -lt 3 ] && sleep 10
            fi
          done
          
          # 检查下载结果
          if grep -q "ERROR" download.log; then
            echo "⚠️ 下载过程中有错误，但继续编译..."
          fi
      # ============================================
      # 智能编译策略
      # ============================================
      - name: 🔨 智能编译固件
        id: compile
        timeout-minutes: 240
        run: |
          cd "$OPENWRT_PATH"
          
          # 设置编译环境
          export USE_CCACHE=1
          export CCACHE_DIR="$PWD/.ccache"
          export CONFIG_CCACHE=y
          export PATH="/usr/lib/ccache:$PATH"
          
          echo "🚀 开始智能编译 ($(date))"
          echo "📊 编译策略: ${{ needs.pre-check.outputs.compile_strategy }}"
          echo "💻 CPU核心: $(nproc)"
          echo "💾 可用内存: $(free -h | grep '^Mem:' | awk '{print $7}')"
          echo "🔧 编译并行度: $COMPILE_JOBS"
          
          # 编译前ccache状态
          echo "📊 编译前 ccache 状态:"
          ccache -s 2>/dev/null || echo "ccache 准备中..."
          
          # 根据策略选择编译方法
          case "${{ needs.pre-check.outputs.compile_strategy }}" in
            "staged")
              # 分阶段编译（跳过工具链）
              echo "🔨 阶段1: 目标平台编译"
              make target/compile -j$COMPILE_JOBS || make target/compile -j1 V=s
              
              echo "🔨 阶段2: 软件包编译"
              PACKAGE_JOBS=$((COMPILE_JOBS < 8 ? COMPILE_JOBS : 8))
              make package/compile -j$PACKAGE_JOBS || make package/compile -j1 V=s
              
              echo "🔨 阶段3: 固件组装"
              make package/install target/install package/index -j$COMPILE_JOBS
              ;;
              
            "standard")
              # 标准编译
              echo "🔨 标准编译模式"
              make -j$COMPILE_JOBS || make -j1 V=s
              ;;
              
            "full")
              # 完整编译（最保守）
              echo "🔨 完整编译模式"
              make -j1 V=s
              ;;
          esac
          
          echo "✅ 编译完成"
          echo "status=success" >> $GITHUB_OUTPUT
          
          # 编译后ccache统计
          echo "📊 编译后 ccache 统计:"
          ccache -s
      # ============================================
      # 编译后处理
      # ============================================
      - name: 📦 整理固件文件
        if: steps.compile.outputs.status == 'success'
        id: organize
        run: |
          cd "$OPENWRT_PATH/bin/targets"/*/*
          
          echo "📦 生成的文件:"
          ls -lah
          
          # 提取内核版本
          KERNEL_VERSION="unknown"
          if ls *.manifest 1> /dev/null 2>&1; then
            KERNEL_VERSION=$(grep "^kernel " *.manifest | head -1 | awk '{print $3}' | cut -d- -f1-2 || echo "unknown")
          fi
          
          # 复制构建配置
          cp "$OPENWRT_PATH/.config" build.config
          
          # 打包内核模块
          if [ -d packages ]; then
            tar -czf kernel-modules-${{ env.FILE_DATE }}.tar.gz packages/
            rm -rf packages
          fi
          
          # 清理多余文件
          rm -f feeds.buildinfo version.buildinfo *.manifest sha256sums
          
          # 生成固件信息文件
          cat > firmware_info.json <<EOF
          {
            "build_date": "$BUILD_DATE",
            "build_version": "$BUILD_VERSION",
            "build_id": "$BUILD_ID",
            "kernel_version": "$KERNEL_VERSION",
            "target": "$DEVICE_TARGET",
            "subtarget": "$DEVICE_SUBTARGET",
            "lan_address": "${{ github.event.inputs.lan_addr }}",
            "root_password": "${{ github.event.inputs.root_password }}",
            "commit_hash": "$COMMIT_HASH",
            "commit_date": "$COMMIT_DATE",
            "compile_strategy": "${{ needs.pre-check.outputs.compile_strategy }}",
            "plugins": {
              "docker": ${{ github.event.inputs.docker }},
              "ssrp": ${{ github.event.inputs.ssrp }},
              "passwall": ${{ github.event.inputs.passwall }},
              "openclash": ${{ github.event.inputs.openclash }},
              "nikki": ${{ github.event.inputs.nikki }},
              "lucky": ${{ github.event.inputs.lucky }},
              "oaf": ${{ github.event.inputs.oaf }}
            }
          }
          EOF
          
          # 生成安装说明
          cat > README.md <<EOF
          # OpenWrt 固件说明
          
          ## 🎯 固件信息
          - **版本**: $BUILD_VERSION
          - **目标**: $DEVICE_TARGET-$DEVICE_SUBTARGET  
          - **内核**: $KERNEL_VERSION
          - **编译时间**: $BUILD_DATE
          - **LAN地址**: ${{ github.event.inputs.lan_addr }}
          - **默认密码**: ${{ github.event.inputs.root_password }}
          
          ## 📦 包含插件
          ${{ github.event.inputs.docker == 'true' && '- ✅ Docker' || '- ❌ Docker' }}
          ${{ github.event.inputs.ssrp == 'true' && '- ✅ ShadowSocksR Plus+' || '- ❌ ShadowSocksR Plus+' }}
          ${{ github.event.inputs.passwall == 'true' && '- ✅ Passwall' || '- ❌ Passwall' }}
          ${{ github.event.inputs.openclash == 'true' && '- ✅ OpenClash' || '- ❌ OpenClash' }}
          ${{ github.event.inputs.nikki == 'true' && '- ✅ Nikki' || '- ❌ Nikki' }}
          ${{ github.event.inputs.lucky == 'true' && '- ✅ Lucky' || '- ❌ Lucky' }}
          ${{ github.event.inputs.oaf == 'true' && '- ✅ OpenAppFilter' || '- ❌ OpenAppFilter' }}
          
          ## 📥 安装方法
          
          ### UEFI启动（推荐）:
          \`\`\`bash
          gunzip openwrt-*-generic-ext4-combined-efi.img.gz
          dd if=openwrt-*-generic-ext4-combined-efi.img of=/dev/sdX bs=4M status=progress
          \`\`\`
          
          ### 传统BIOS启动:
          \`\`\`bash
          gunzip openwrt-*-generic-ext4-combined.img.gz  
          dd if=openwrt-*-generic-ext4-combined.img of=/dev/sdX bs=4M status=progress
          \`\`\`
          
          ### VMware虚拟机:
          直接使用 \`.vmdk\` 文件创建虚拟机
          
          ## ⚠️ 注意事项
          1. 首次启动后请立即修改默认密码
          2. 建议备份原有固件后再刷写
          3. 刷写前请确认硬件兼容性
          EOF
          
          {
            echo "firmware_path=$PWD"
            echo "kernel_version=$KERNEL_VERSION"
          } >> $GITHUB_OUTPUT
          
          echo "FIRMWARE_PATH=$PWD" >> $GITHUB_ENV
          echo "📦 固件整理完成，路径: $PWD"
      # ============================================
      # 性能统计报告
      # ============================================
      - name: 📊 构建性能报告
        if: always()
        run: |
          cd "$OPENWRT_PATH" 2>/dev/null || cd .
          
          # 计算构建时间
          BUILD_END_TIME=$(date +%s)
          BUILD_DURATION=$((BUILD_END_TIME - BUILD_START_TIME))
          BUILD_DURATION_MIN=$((BUILD_DURATION / 60))
          BUILD_DURATION_SEC=$((BUILD_DURATION % 60))
          
          echo "======================================="
          echo "📊 OpenWrt 构建性能分析报告"
          echo "======================================="
          echo "🕐 构建完成时间: $(date)"
          echo "⏱️ 总构建时间: ${BUILD_DURATION_MIN}分${BUILD_DURATION_SEC}秒"
          echo "🏷️ 构建ID: ${{ github.run_number }}"
          echo "🌿 OpenWrt分支: ${{ env.REPO_BRANCH }}"
          echo "🎯 编译策略: ${{ needs.pre-check.outputs.compile_strategy }}"
          echo "🔧 配置Hash: ${{ needs.pre-check.outputs.config_hash }}"
          echo "📦 目标平台: ${DEVICE_TARGET:-unknown}-${DEVICE_SUBTARGET:-unknown}"
          echo ""
          
          # ccache 详细统计
          echo "🎯 ccache 性能分析:"
          if command -v ccache >/dev/null 2>&1; then
            export CCACHE_DIR="$PWD/.ccache"
            
            # 获取统计数据
            STATS=$(ccache -s 2>/dev/null || echo "统计不可用")
            echo "$STATS"
            
            # 计算命中率
            if echo "$STATS" | grep -q "cache hit"; then
              DIRECT_HITS=$(echo "$STATS" | grep "cache hit (direct)" | awk '{print $4}' 2>/dev/null || echo "0")
              PREPROCESSED_HITS=$(echo "$STATS" | grep "cache hit (preprocessed)" | awk '{print $4}' 2>/dev/null || echo "0")
              TOTAL_HITS=$((DIRECT_HITS + PREPROCESSED_HITS))
              MISSES=$(echo "$STATS" | grep "cache miss" | awk '{print $3}' 2>/dev/null || echo "1")
              
              if [ "$MISSES" != "0" ] && [ "$TOTAL_HITS" != "0" ]; then
                HIT_RATE=$(echo "scale=2; $TOTAL_HITS * 100 / ($TOTAL_HITS + $MISSES)" | bc -l 2>/dev/null || echo "N/A")
                echo ""
                echo "📈 缓存效率分析:"
                echo "  🎯 总命中率: ${HIT_RATE}%"
                echo "  ⚡ 直接命中: $DIRECT_HITS"
                echo "  🔄 预处理命中: $PREPROCESSED_HITS"
                echo "  ❌ 缓存未命中: $MISSES"
                
                # 性能评级
                if [ "$(echo "$HIT_RATE >= 75" | bc -l 2>/dev/null)" = "1" ]; then
                  echo "  🏆 性能评级: 优秀 (≥75%)"
                elif [ "$(echo "$HIT_RATE >= 60" | bc -l 2>/dev/null)" = "1" ]; then
                  echo "  🥈 性能评级: 良好 (≥60%)"
                elif [ "$(echo "$HIT_RATE >= 40" | bc -l 2>/dev/null)" = "1" ]; then
                  echo "  🥉 性能评级: 一般 (≥40%)"
                else
                  echo "  📉 性能评级: 需优化 (<40%)"
                fi
              fi
            fi
          else
            echo "ccache 不可用"
          fi
          
          echo ""
          echo "💾 缓存目录大小分析:"
          du -sh .ccache/ 2>/dev/null | awk '{print "📦 ccache: " $1}' || echo "📦 ccache: N/A"
          du -sh staging_dir/ 2>/dev/null | awk '{print "🔧 staging: " $1}' || echo "🔧 staging: N/A"
          du -sh build_dir/ 2>/dev/null | awk '{print "🏗️ build: " $1}' || echo "🏗️ build: N/A"
          du -sh dl/ 2>/dev/null | awk '{print "📥 downloads: " $1}' || echo "📥 downloads: N/A"
          
          echo ""
          echo "🎯 构建产物:"
          if [ -d "bin/targets" ]; then
            find bin/targets -name "*.img.gz" -o -name "*.bin" -o -name "*.vmdk" | head -5 | sed 's/^/  ✅ /'
          else
            echo "  ❌ 未找到构建产物"
          fi
          
          echo ""
          echo "🔍 优化建议:"
          if [ "$(echo "${HIT_RATE:-0} < 60" | bc -l 2>/dev/null)" = "1" ]; then
            echo "  💡 缓存命中率较低，建议检查配置变更频率"
          fi
          echo "  🚀 下次编译预计时间: $((BUILD_DURATION_MIN / 3))-$((BUILD_DURATION_MIN / 2))分钟"
          echo "======================================="
      # ============================================
      # 上传处理
      # ============================================
      - name: 📤 上传 Artifacts
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_ARTIFACTS == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: OpenWrt-${{ env.DEVICE_TARGET }}-${{ env.FILE_DATE }}-${{ needs.pre-check.outputs.compile_strategy }}
          path: ${{ env.FIRMWARE_PATH }}
          retention-days: 30
          compression-level: 6
      - name: 🚀 创建 Release
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true'
        uses: ncipollo/release-action@v1.14.0
        with:
          name: ${{ env.FILE_DATE }} • ${{ env.FIRMWARE_TAG }} • ${{ needs.pre-check.outputs.compile_strategy }}
          allowUpdates: true
          tag: ${{ env.FIRMWARE_TAG }}-${{ env.FILE_DATE }}-${{ needs.pre-check.outputs.compile_strategy }}
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: ${{ env.FIRMWARE_PATH }}/*
          body: |
            ## 🎯 OpenWrt 固件发布 [${{ env.BUILD_ID }}]
            
            > 🚀 **编译策略**: `${{ needs.pre-check.outputs.compile_strategy }}` | 🕐 **编译时间**: 约 ${{ needs.pre-check.outputs.compile_strategy == 'staged' && '3-4小时' || '5-6小时' }}
            
            ### 📊 固件信息
            | 项目 | 详情 |
            |------|------|
            | **🏷️ 版本** | `${{ env.BUILD_VERSION }}` |
            | **📅 日期** | `${{ env.BUILD_DATE }}` |
            | **🎯 目标** | `${{ env.DEVICE_TARGET }}_${{ env.DEVICE_SUBTARGET }}` |
            | **🔧 内核** | `${{ steps.organize.outputs.kernel_version }}` |
            | **🌐 LAN IP** | `${{ github.event.inputs.lan_addr }}` |
            | **🔑 密码** | `${{ github.event.inputs.root_password }}` |
            | **⚡ 编译模式** | `${{ needs.pre-check.outputs.compile_strategy }}` |
            
            ### 📦 集成插件
            | 插件名称 | 状态 | 说明 |
            |---------|------|------|
            | 🐋 Docker | ${{ github.event.inputs.docker == 'true' && '✅ 已集成' || '❌ 未集成' }} | 容器化平台 |
            | 🚀 ShadowSocksR Plus+ | ${{ github.event.inputs.ssrp == 'true' && '✅ 已集成' || '❌ 未集成' }} | 科学上网 |
            | 🌐 Passwall | ${{ github.event.inputs.passwall == 'true' && '✅ 已集成' || '❌ 未集成' }} | 代理工具 |
            | ⚡ OpenClash | ${{ github.event.inputs.openclash == 'true' && '✅ 已集成' || '❌ 未集成' }} | Clash客户端 |
            | 📦 Nikki | ${{ github.event.inputs.nikki == 'true' && '✅ 已集成' || '❌ 未集成' }} | 系统工具 |
            | 🍀 Lucky | ${{ github.event.inputs.lucky == 'true' && '✅ 已集成' || '❌ 未集成' }} | 多功能工具 |
            | 🛡️ OpenAppFilter | ${{ github.event.inputs.oaf == 'true' && '✅ 已集成' || '❌ 未集成' }} | 应用过滤 |
            
            ### 📥 安装指南
            
            #### 🖥️ UEFI 系统（推荐）
            ```bash
            # 解压固件
            gunzip openwrt-*-generic-ext4-combined-efi.img.gz
            
            # 写入U盘/硬盘（请替换 /dev/sdX 为实际设备）
            sudo dd if=openwrt-*-generic-ext4-combined-efi.img of=/dev/sdX bs=4M status=progress
