name: üíª Build OpenWrt (x86_64)
on:
  workflow_dispatch:
    inputs:
      lan_addr:
        description: "ËÆæÁΩÆÈªòËÆ§ LAN Âú∞ÂùÄ"
        default: "192.168.1.10"
        required: true
        type: string
      root_password:
        description: "ÈªòËÆ§ root ÂØÜÁ†ÅÔºàÂèØÈÄâÔºåÈªòËÆ§ passwordÔºâ"
        default: "password"
        required: false
        type: string
      docker:
        description: "ÁºñËØë Docker"
        type: boolean
        default: true
      ssrp:
        description: "ÁºñËØë ShadowSocksR Plus+"
        type: boolean
        default: true
      passwall:
        description: "ÁºñËØë Passwall"
        type: boolean
        default: true
      nikki:
        description: "ÁºñËØë Nikki"
        type: boolean
        default: true
      openclash:
        description: "ÁºñËØë OpenClash"
        type: boolean
        default: true
      lucky:
        description: "ÁºñËØë Lucky"
        type: boolean
        default: true
      oaf:
        description: "ÁºñËØë OpenAppFilter"
        type: boolean
        default: true
env:
  REPO_URL: https://github.com/openwrt/openwrt
  REPO_BRANCH: openwrt-24.10
  CACHE_VER: v5
  CONFIG_FILE: configs/x86_64.config
  DIY_SCRIPT: scripts/diy-x86_64.sh
  CLASH_KERNEL: amd64
  UPLOAD_BIN_DIR: false
  FIRMWARE_RELEASE: true
  FIRMWARE_TAG: X86_64
jobs:
  build:
    runs-on: ubuntu-24.04
    timeout-minutes: 360
    # „Äê‰ºòÂåñ„Äë‰∏∫ÊâÄÊúâÂêéÁª≠Ê≠•È™§ËÆæÁΩÆÈªòËÆ§Â∑•‰ΩúÁõÆÂΩï
    defaults:
      run:
        working-directory: ./openwrt
    steps:
      - name: Setup environment
        # „Äê‰ºòÂåñ„ÄëÊ≠§Ê≠•È™§Âú®Â∑•‰ΩúÁõÆÂΩï‰πãÂ§ñÊâßË°å
        run: |
          sudo timedatectl set-timezone Asia/Shanghai
          mkdir -p $HOME/.ccache
          echo "max_size = 5.0G" > $HOME/.ccache/ccache.conf
        working-directory: ${{ github.workspace }}
      - name: Maximize build space
        uses: easimon/maximize-build-space@v10
        with:
          root-reserve-mb: 512
          swap-size-mb: 1024
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
      # „ÄêÂÖ≥ÈîÆ‰øÆÊ≠£ 1„ÄëÊàë‰ª¨Âè™Ê£ÄÂá∫‰∏ÄÊ¨°‰∏ª‰ªìÂ∫ìÔºàÂåÖÂê´ËÑöÊú¨ÂíåÈÖçÁΩÆÔºâÔºå‰ª•ÁÆÄÂåñË∑ØÂæÑ„ÄÇ
      - name: Checkout Action main repository
        uses: actions/checkout@v4
        working-directory: ${{ github.workspace }}
      # „ÄêÂÖ≥ÈîÆ‰øÆÊ≠£ 2„Äë‰ΩøÁî® git clone Êù•ÊãâÂèñ OpenWrt Ê∫êÁ†ÅÔºåÁ°Æ‰øùÂéÜÂè≤ËÆ∞ÂΩïÂÆåÊï¥„ÄÇ
      - name: Clone OpenWrt source code
        id: clone_source
        run: |
          git clone --depth=1 https://github.com/openwrt/openwrt -b openwrt-24.10 openwrt
          cd openwrt
          echo "OPENWRT_PATH=$PWD" >> $GITHUB_ENV
          # Â∞Ü Commit ‰ø°ÊÅØÊ†ºÂºèÂåñÂπ∂ÂÜôÂÖ• GITHUB_ENV
          echo "COMMIT_AUTHOR=$(git show -s --format='‰ΩúËÄÖ: %an')" >> $GITHUB_ENV
          echo "COMMIT_DATE=$(git show -s --format='Êó∂Èó¥: %ci')" >> $GITHUB_ENV
          echo "COMMIT_MESSAGE=$(git show -s --format='ÂÜÖÂÆπ: %s')" >> $GITHUB_ENV
          echo "COMMIT_HASH=$(git show -s --format='hash: %H')" >> $GITHUB_ENV
          echo "CURRENT_DATE=$(date +%s)" >> $GITHUB_ENV
          # Ëé∑ÂèñÊúÄÊñ∞Á®≥ÂÆöÁâà Tag
          latest_release=$(curl -s "https://api.github.com/repos/openwrt/openwrt/tags" | jq -r '.[].name' | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -n 1 | sed 's/^v//')
          if [ -z "$latest_release" ]; then
            echo "::warning::Failed to fetch latest tag, using fallback."
            latest_release="24.10.x"
          fi
          echo "latest_release=$latest_release" >> $GITHUB_ENV
          echo "Latest release tag determined: $latest_release"
        working-directory: ${{ github.workspace }}
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libncurses5-dev libncursesw5-dev clang llvm golang-go
        working-directory: ${{ github.workspace }}
      - name: Cache Downloads
        uses: actions/cache@v4
        with:
          path: ./openwrt/dl
          key: dl-${{ runner.os }}-${{ env.CACHE_VER }}-${{ hashFiles('configs/**.config', 'config-*.txt') }}
      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ccache-${{ runner.os }}-${{ env.CACHE_VER }}-${{ env.REPO_BRANCH }}-${{ hashFiles('configs/**.config', 'config-*.txt') }}
          max-size: 5G
      - name: Install Feeds
        run: |
          if [ -f "${{ github.workspace }}/feeds.conf.default" ]; then
            cp ${{ github.workspace }}/feeds.conf.default ./feeds.conf.default
          else
            echo "::warning::feeds.conf.default not found. Using default OpenWrt feeds."
          fi
          ./scripts/feeds update -a
          ./scripts/feeds install -a
      - name: Load Custom Configuration & DIY Script
        env:
          LAN: ${{ github.event.inputs.lan_addr }}
          ROOT_PASSWORD: ${{ github.event.inputs.root_password }}
          ENABLE_DOCKER: ${{ github.event.inputs.docker }}
          ENABLE_SSRP: ${{ github.event.inputs.ssrp }}
          ENABLE_PASSWALL: ${{ github.event.inputs.passwall }}
          ENABLE_NIKKI: ${{ github.event.inputs.nikki }}
          ENABLE_OPENCLASH: ${{ github.event.inputs.openclash }}
          ENABLE_LUCKY: ${{ github.event.inputs.lucky }}
          ENABLE_OAF: ${{ github.event.inputs.oaf }}
        run: |
          # „ÄêË∑ØÂæÑ‰ºòÂåñ„ÄëÁõ¥Êé•‰ªéÂ∑•‰ΩúÂå∫Ê†πÁõÆÂΩïÂ§çÂà∂Êñá‰ª∂
          cp ${{ github.workspace }}/${{ env.CONFIG_FILE }} .config
          
          # „ÄêË∑ØÂæÑ‰ºòÂåñ„ÄëÁé∞Âú®ÊâÄÊúâËá™ÂÆö‰πâÈÖçÁΩÆÈÉΩÂú®Â∑•‰ΩúÂå∫Ê†πÁõÆÂΩï
          [[ "$ENABLE_DOCKER"    == "true" && -f "${{ github.workspace }}/configs/config-docker.txt" ]] && cat ${{ github.workspace }}/configs/config-docker.txt >> .config
          [[ "$ENABLE_SSRP"      == "true" && -f "${{ github.workspace }}/config-ssrp.txt" ]] && cat ${{ github.workspace }}/config-ssrp.txt >> .config
          [[ "$ENABLE_PASSWALL"  == "true" && -f "${{ github.workspace }}/config-passwall.txt" ]] && cat ${{ github.workspace }}/config-passwall.txt >> .config
          chmod +x ${{ github.workspace }}/${{ env.DIY_SCRIPT }}
          ${{ github.workspace }}/${{ env.DIY_SCRIPT }}
          
          chmod +x ${{ github.workspace }}/scripts/preset-mihimo-core.sh
          chmod +x ${{ github.workspace }}/scripts/preset-adguard-core.sh
          ${{ github.workspace }}/scripts/preset-mihimo-core.sh ${{ env.CLASH_KERNEL }}
          ${{ github.workspace }}/scripts/preset-adguard-core.sh ${{ env.CLASH_KERNEL }}
          
          make defconfig
          
          DEVICE_TARGET=$(grep -E "^CONFIG_TARGET_[a-zA-Z0-9_]+=" .config | grep -E "=y$" | head -n1 | sed -r 's/CONFIG_TARGET_(.*)=y/\1/' | sed -r 's/(_[a-zA-Z0-9_]+)$//')
          DEVICE_SUBTARGET=$(grep -E "^CONFIG_TARGET_${DEVICE_TARGET}_[a-zA-Z0-9_]+=" .config | grep -E "=y$" | head -n1 | sed -r "s/CONFIG_TARGET_${DEVICE_TARGET}_(.*)=y/\1/")
          echo "DEVICE_TARGET=$DEVICE_TARGET" >> $GITHUB_ENV
          echo "DEVICE_SUBTARGET=$DEVICE_SUBTARGET" >> $GITHUB_ENV
          echo "IP_ADDR=${LAN}" >> $GITHUB_ENV
      - name: Download packages
        run: make download -j$(nproc)
      - name: Compile Firmware
        id: compile
        run: |
          echo -e "Starting compile with $(nproc) threads"
          make -j$(nproc) || make -j1 V=s
          echo "status=success" >> $GITHUB_OUTPUT
          echo "FILE_DATE=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_ENV
          echo "KERNEL=$(cat bin/targets/*/*/openwrt-*.manifest | grep '^kernel' | head -n1 | awk '{print $3}' | awk -F- '{print $2}')" >> $GITHUB_ENV
      # ... ÂêéÁª≠ÁöÑ‰∏ä‰º†Ê≠•È™§‰øùÊåÅ‰∏çÂèòÔºåÂõ†‰∏∫ÂÆÉ‰ª¨‰æùËµñ‰∫é GITHUB_ENV ‰∏≠ÁöÑÂèòÈáèÔºåÂÖ∂ËÆæÁΩÆÊòØÊ≠£Á°ÆÁöÑ ...
      - name: Check space usage
        if: always()
        run: df -hT
        working-directory: ${{ github.workspace }} # Ëøô‰∏™Ê≠•È™§ÂèØ‰ª•Âú®‰ªª‰ΩïÂú∞ÊñπËøêË°å
      - name: Organise files
        if: steps.compile.outputs.status == 'success'
        run: |
          cd bin/targets/*/*
          rm -f sha256sums packages*
          cp ../../../../.config build.config # Ë∞ÉÊï¥ .config ÁöÑÁõ∏ÂØπË∑ØÂæÑ
          echo "FIRMWARE_PATH=$PWD" >> $GITHUB_ENV
      - name: Upload Bin Directory (optional)
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: openwrt-bin-${{ env.FILE_DATE }}
          path: ${{ env.OPENWRT_PATH }}/bin
      - name: Upload Firmware to Artifact
        if: steps.compile.outputs.status == 'success' && env.FIRMWARE_RELEASE != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: openwrt-firmware-${{ env.FILE_DATE }}
          path: ${{ env.FIRMWARE_PATH }}
      - name: Upload Firmware to Release
        if: steps.compile.outputs.status == 'success' && env.FIRMWARE_RELEASE == 'true'
        uses: ncipollo/release-action@v1.14.0
        with:
          name: Release ${{ env.FILE_DATE }}
          tag: ${{ env.FIRMWARE_TAG }}-${{ env.FILE_DATE }}
          token: ${{ secrets.GITHUB_TOKEN }}
          allowUpdates: true
          artifacts: ${{ env.FIRMWARE_PATH }}/*
          body: |
            **This is OpenWrt Firmware built by GitHub Actions**
            ### üìí Firmware Information
            - üíª **Architecture:** `${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}`
            - üåê **Default IP:** `${{ env.IP_ADDR }}`
            - üîë **Default Password:** `${{ github.event.inputs.root_password }}`
            - üöÄ **Kernel Version:** `${{ env.KERNEL }}`
            
            ### üßä Source Code Version
            - **Source:** `${{ env.REPO_URL }}` (Branch: `${{ env.REPO_BRANCH }}`)
            - **Latest Commit:**
              - `${{ env.COMMIT_AUTHOR }}`
              - `${{ env.COMMIT_DATE }}`
              - `${{ env.COMMIT_MESSAGE }}`
              - `${{ env.COMMIT_HASH }}`
