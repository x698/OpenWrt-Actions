name: 🔧 Build & Publish Toolchain (OpenWrt 24.10)
permissions:
  contents: write
  actions: read

on:
  workflow_dispatch:
    inputs:
      targets_json:
        description: '目标平台 JSON 数组（示例：["x86_64","nanopi-r5s"])'
        default: '["x86_64"]'
        required: true
        type: string
  schedule:
    - cron: '0 2 * * 0'

env:
  REPO_URL: https://github.com/openwrt/openwrt
  REPO_BRANCH: openwrt-24.10
  TZ: Asia/Shanghai
  CACHE_VERSION: v2025-03-01

jobs:
  build-toolchain:
    name: 🔧 Build ${{ matrix.target }} Toolchain
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        # 直接从 JSON 数组输入解析，避免 replace/split 报错
        target: ${{ fromJson(github.event.inputs.targets_json) }}

    steps:
      - name: ✅ Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: 🔧 Setup Environment
        run: |
          sudo timedatectl set-timezone "$TZ"
          echo "BUILD_DATE=$(date +'%Y.%m.%d')" >> $GITHUB_ENV
          echo "MONTH_KEY=$(date +'%Y%m')" >> $GITHUB_ENV
          echo "RELEASE_TAG=toolchain-$REPO_BRANCH" >> $GITHUB_ENV

      - name: 🧹 Free Disk Space
        uses: sbwml/actions@free-disk

      - name: 🛠️ Build System Setup
        uses: sbwml/actions@openwrt-build-setup

      - name: 📦 Install LLVM
        uses: sbwml/actions@install-llvm

      - name: 📥 Clone OpenWrt
        run: |
          rm -rf openwrt
          git clone --depth=1 "$REPO_URL" -b "$REPO_BRANCH" openwrt
          cd openwrt
          echo "OPENWRT_PATH=$PWD" >> $GITHUB_ENV
          SOURCE_HASH=$(git rev-parse HEAD)
          echo "SOURCE_HASH=$SOURCE_HASH" >> $GITHUB_ENV

      - name: ☁️ Cache Downloads
        uses: actions/cache@v4
        with:
          path: openwrt/dl
          key: downloads-${{ env.CACHE_VERSION }}-${{ env.REPO_BRANCH }}-v1
          restore-keys: |
            downloads-${{ env.REPO_BRANCH }}-

      - name: ☁️ Cache Feeds & Index (monthly)
        uses: actions/cache@v4
        with:
          path: |
            openwrt/feeds
            openwrt/tmp/packagecache
          key: feeds-${{ env.CACHE_VERSION }}-${{ env.REPO_BRANCH }}-${{ env.MONTH_KEY }}-v1
          restore-keys: |
            feeds-${{ env.CACHE_VERSION }}-${{ env.REPO_BRANCH }}-
            feeds-${{ env.REPO_BRANCH }}-

      - name: ☁️ Cache Toolchain (source-based)
        uses: actions/cache@v4
        with:
          path: |
            openwrt/staging_dir/toolchain-*
            openwrt/build_dir/toolchain-*
          key: toolchain-${{ env.CACHE_VERSION }}-${{ env.REPO_BRANCH }}-${{ env.SOURCE_HASH }}-${{ matrix.target }}-v1
          restore-keys: |
            toolchain-${{ env.CACHE_VERSION }}-${{ env.REPO_BRANCH }}-${{ matrix.target }}-
            toolchain-${{ env.REPO_BRANCH }}-

      - name: ☁️ Cache Build Host (monthly)
        uses: actions/cache@v4
        with:
          path: openwrt/build_dir/host*
          key: host-${{ env.CACHE_VERSION }}-${{ env.REPO_BRANCH }}-${{ env.MONTH_KEY }}-v1
          restore-keys: |
            host-${{ env.CACHE_VERSION }}-${{ env.REPO_BRANCH }}-
            host-${{ env.REPO_BRANCH }}-

      - name: ☁️ Cache ccache (shared per branch)
        uses: actions/cache@v4
        with:
          path: openwrt/.ccache
          key: toolchain-ccache-${{ env.CACHE_VERSION }}-${{ env.REPO_BRANCH }}-v1
          restore-keys: |
            toolchain-ccache-${{ env.REPO_BRANCH }}-

      - name: 📚 Configure Feeds
        run: |
          cd "$OPENWRT_PATH"
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: ⚙️ Configure Target
        run: |
          cd "$OPENWRT_PATH"
          case "${{ matrix.target }}" in
            "x86_64")
              cat > .config <<'EOF'
          CONFIG_TARGET_x86=y
          CONFIG_TARGET_x86_64=y
          EOF
              ;;
            "nanopi-r5s")
              cat > .config <<'EOF'
          CONFIG_TARGET_rockchip=y
          CONFIG_TARGET_rockchip_armv8=y
          EOF
              ;;
            *)
              echo "::error::未知目标: ${{ matrix.target }}"
              exit 1
              ;;
          esac
          make defconfig

      - name: 🔧 Setup ccache
        run: |
          cd "$OPENWRT_PATH"
          export USE_CCACHE=1
          export CCACHE_DIR="$PWD/.ccache"
          export CCACHE_BASEDIR="$PWD"
          export PATH="/usr/lib/ccache:$PATH"
          mkdir -p "$CCACHE_DIR"
          ccache --set-config=max_size=15G
          ccache --set-config=max_files=250000
          ccache --set-config=compression=true
          ccache --set-config=compiler_check=content
          ccache --set-config=hash_dir=false
          ccache -s || true

      - name: 🧰 Install GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y gh

      - name: 🔍 Skip If Already Published
        id: check
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG="${{ env.RELEASE_TAG }}"
          ASSET="toolchain-${{ matrix.target }}-${{ env.SOURCE_HASH }}.tar.gz"
          if gh release view "$TAG" --json assets --jq '.assets[].name' | grep -qx "$ASSET"; then
            echo "skip=true" >> $GITHUB_OUTPUT
            echo "✅ Found existing $ASSET. Skip build."
          else
            echo "skip=false" >> $GITHUB_OUTPUT
          fi

      - name: 🔨 Build Toolchain
        if: steps.check.outputs.skip == 'false'
        run: |
          cd "$OPENWRT_PATH"
          export USE_CCACHE=1
          export CCACHE_DIR="$PWD/.ccache"
          make -j$(nproc) tools/install
          make -j$(nproc) toolchain/install

      - name: 📦 Package Toolchain
        if: steps.check.outputs.skip == 'false'
        id: package
        run: |
          cd "$OPENWRT_PATH"
          OUT="toolchain-${{ matrix.target }}-${{ env.SOURCE_HASH }}.tar.gz"
          tar -czf "../$OUT" staging_dir/toolchain-* build_dir/toolchain-*
          echo "artifact_path=../$OUT" >> $GITHUB_OUTPUT

      - name: 🚀 Upload Toolchain (hashed)
        if: steps.check.outputs.skip == 'false'
        uses: ncipollo/release-action@v1.14.0
        with:
          name: Toolchain • ${{ env.REPO_BRANCH }} • ${{ env.BUILD_DATE }}
          allowUpdates: true
          tag: ${{ env.RELEASE_TAG }}
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: ${{ steps.package.outputs.artifact_path }}

      - name: 🔁 Ensure 'latest' Alias
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG="${{ env.RELEASE_TAG }}"
          HASHED="toolchain-${{ matrix.target }}-${{ env.SOURCE_HASH }}.tar.gz"
          LATEST="toolchain-${{ matrix.target }}-latest.tar.gz"
          if gh release view "$TAG" >/dev/null 2>&1; then
            if ! gh release view "$TAG" --json assets --jq '.assets[].name' | grep -qx "$LATEST"; then
              [ -f "$HASHED" ] || gh release download "$TAG" -p "$HASHED" -D .
              cp "$HASHED" "$LATEST"
              gh release upload "$TAG" "$LATEST" --clobber
            fi
          fi

      - name: 📊 Build Summary
        run: |
          echo "Target: ${{ matrix.target }}"
          echo "Branch: ${{ env.REPO_BRANCH }}"
          echo "Source hash: ${{ env.SOURCE_HASH }}"
          ls -lh .. | grep toolchain || true
