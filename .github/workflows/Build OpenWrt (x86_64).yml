name: 💻 Build OpenWrt (x86_64) - Enhanced & Stabilized
permissions:
  contents: write
  actions: read
on:
  workflow_dispatch:
    inputs:
      lan_addr:
        description: "📍 默认 LAN 地址"
        default: "192.168.10.1"
        required: true
        type: string
      root_password:
        description: "🔑 Root 密码"
        default: "password"
        required: false
        type: string
      docker:
        description: "🐋 Docker 支持"
        type: boolean
        default: true
      ssrp:
        description: "🚀 ShadowSocksR Plus+"
        type: boolean
        default: true
      passwall:
        description: "🌐 Passwall"
        type: boolean
        default: true
      nikki:
        description: "📦 Nikki"
        type: boolean
        default: true
      openclash:
        description: "⚡ OpenClash"
        type: boolean
        default: true
      lucky:
        description: "🍀 Lucky"
        type: boolean
        default: true
      oaf:
        description: "🛡️ OpenAppFilter"
        type: boolean
        default: true
      use_prebuilt_toolchain:
        description: "🔧 使用预编译工具链 (推荐)"
        type: boolean
        default: true
      force_clean:
        description: "🧹 强制清理构建目录"
        type: boolean
        default: false

env:
  REPO_URL: https://github.com/openwrt/openwrt
  REPO_BRANCH: openwrt-24.10
  CONFIG_FILE: configs/x86_64.config
  DIY_SCRIPT: scripts/diy-x86_64_demo.sh
  FEEDS_CONF: feeds.conf.default
  CLASH_KERNEL: amd64
  UPLOAD_ARTIFACTS: false
  UPLOAD_RELEASE: true
  FIRMWARE_TAG: X86_64
  TZ: Asia/Shanghai
  DEBIAN_FRONTEND: noninteractive

concurrency:
  group: build-${{ github.ref }}-${{ github.event.inputs.lan_addr }}
  cancel-in-progress: false

jobs:
  build:
    name: 🏗️ Build OpenWrt
    runs-on: ubuntu-24.04
    timeout-minutes: 480
    outputs:
      firmware_path: ${{ steps.organize.outputs.firmware_path }}
      kernel_version: ${{ steps.organize.outputs.kernel_version }}
      cache_hit_rate: ${{ steps.cache-stats.outputs.hit_rate }}

    steps:
      - name: 🔧 Setup Environment
        id: env
        run: |
          sudo timedatectl set-timezone "$TZ"
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          VERSION=$(date +'%Y.%m.%d')
          BUILD_ID="${{ github.run_number }}-${GITHUB_SHA::7}"
          FILE_DATE=$(date +'%Y.%m.%d-%H%M')
          
          PROC_COUNT=$(nproc)
          MEM_GB=$(($(free -m | awk '/^Mem:/{print $2}') / 1024))
          JOBS=$((MEM_GB / 2))
          JOBS=$((JOBS > PROC_COUNT ? PROC_COUNT : JOBS))
          JOBS=$((JOBS < 1 ? 1 : JOBS))
          
          PLUGINS_KEY="${{ github.event.inputs.docker }}-${{ github.event.inputs.ssrp }}-${{ github.event.inputs.passwall }}-${{ github.event.inputs.nikki }}-${{ github.event.inputs.openclash }}-${{ github.event.inputs.lucky }}-${{ github.event.inputs.oaf }}"
          PLUGINS_HASH=$(echo "$PLUGINS_KEY" | sha256sum | cut -c1-8)
          
          WEEK_KEY=$(date +'%Y%U')
          
          echo "BUILD_VERSION=$VERSION" >> $GITHUB_ENV
          echo "BUILD_ID=$BUILD_ID" >> $GITHUB_ENV
          echo "FILE_DATE=$FILE_DATE" >> $GITHUB_ENV
          echo "COMPILE_JOBS=$JOBS" >> $GITHUB_ENV
          echo "PLUGINS_HASH=$PLUGINS_HASH" >> $GITHUB_ENV
          echo "WEEK_KEY=$WEEK_KEY" >> $GITHUB_ENV

      - name: 🧹 Free Disk Space
        uses: sbwml/actions@free-disk

      - name: 💾 Setup Swap & Memory Optimization
        run: |
          sudo fallocate -l 8G /swapfile
          sudo chmod 600 /swapfile
          sudo mkswap /swapfile
          sudo swapon /swapfile
          sudo tee -a /etc/sysctl.conf >/dev/null <<EOF
          vm.swappiness=10
          vm.vfs_cache_pressure=50
          EOF
          sudo sysctl -p
          free -h

      - name: 🛠️ Build System Setup
        uses: sbwml/actions@openwrt-build-setup
        
      - name: 📦 Install LLVM
        uses: sbwml/actions@install-llvm
        
      - name: ✅ Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: 📥 Prepare OpenWrt Source
        run: |
          git clone --depth=1 "$REPO_URL" -b "$REPO_BRANCH" openwrt
          cd openwrt
          echo "OPENWRT_PATH=$PWD" >> $GITHUB_ENV
          SOURCE_HASH=$(git rev-parse HEAD)
          echo "SOURCE_HASH=$SOURCE_HASH" >> $GITHUB_ENV

      # ============================================
      # 🚀 1. INTELLIGENT CACHE STRATEGY (FIX FOR 53% HIT RATE)
      # ============================================
      - name: ☁️ Cache Downloads (Plugin-based)
        uses: actions/cache@v4
        with:
          path: openwrt/dl
          key: downloads-${{ env.REPO_BRANCH }}-${{ env.PLUGINS_HASH }}-v8
          restore-keys: |
            downloads-${{ env.REPO_BRANCH }}-${{ env.PLUGINS_HASH }}-
            downloads-${{ env.REPO_BRANCH }}-

      - name: ☁️ Cache Toolchain (Source-based)
        if: github.event.inputs.force_clean != 'true'
        uses: actions/cache@v4
        with:
          path: |
            openwrt/staging_dir/toolchain-*
            openwrt/build_dir/toolchain-*
          key: toolchain-${{ env.REPO_BRANCH }}-${{ env.SOURCE_HASH }}-v8
          restore-keys: |
            toolchain-${{ env.REPO_BRANCH }}-${{ env.SOURCE_HASH }}-
            toolchain-${{ env.REPO_BRANCH }}-

      - name: ☁️ Cache Staging & Packages (Source-based)
        if: github.event.inputs.force_clean != 'true'
        uses: actions/cache@v4
        with:
          path: |
            openwrt/staging_dir/host*
            openwrt/staging_dir/hostpkg
            openwrt/tmp/packagecache
          key: staging-${{ env.REPO_BRANCH }}-${{ env.SOURCE_HASH }}-v8
          restore-keys: |
            staging-${{ env.REPO_BRANCH }}-${{ env.SOURCE_HASH }}-
            staging-${{ env.REPO_BRANCH }}-

      - name: ☁️ Cache Build Host & ccache (Time/Plugin-based)
        if: github.event.inputs.force_clean != 'true'
        uses: actions/cache@v4
        with:
          path: |
            openwrt/build_dir/host*
            openwrt/.ccache
          key: build-cache-${{ env.REPO_BRANCH }}-${{ env.PLUGINS_HASH }}-${{ env.WEEK_KEY }}-v8
          restore-keys: |
            build-cache-${{ env.REPO_BRANCH }}-${{ env.PLUGINS_HASH }}-

      # ============================================
      # 🔧 2. ROBUST PREBUILT TOOLCHAIN HANDLING
      # ============================================
      - name: 🔧 Download & Verify Prebuilt Toolchain
        if: github.event.inputs.use_prebuilt_toolchain == 'true'
        id: prebuilt-toolchain
        continue-on-error: true
        run: |
          cd "$OPENWRT_PATH"
          TOOLCHAIN_URL="https://github.com/${{ github.repository }}/releases/download/toolchain-${{ env.REPO_BRANCH }}/toolchain-x86_64-${{ env.SOURCE_HASH }}.tar.gz"
          echo "🌐 Attempting to download prebuilt toolchain: $TOOLCHAIN_URL"
          
          if curl -fsSL --connect-timeout 20 --max-time 120 "$TOOLCHAIN_URL" -o toolchain.tar.gz; then
            echo "✅ Download complete. Extracting..."
            if tar -xzf toolchain.tar.gz; then
              echo "✅ Extraction successful."
              rm toolchain.tar.gz
              # Apply correct permissions to avoid build errors
              chmod -R u+w,g+w staging_dir/toolchain-* build_dir/toolchain-* 2>/dev/null || true
              echo "TOOLCHAIN_PREBUILT=true" >> $GITHUB_ENV
              echo "status=success" >> $GITHUB_OUTPUT
              exit 0
            fi
          fi
          echo "status=failure" >> $GITHUB_OUTPUT
          echo "⚠️ Prebuilt toolchain not found or failed to extract. Full build required."

      - name: 📚 Configure Feeds
        run: |
          cd "$OPENWRT_PATH"
          if [ -f "${{ github.workspace }}/${{ env.FEEDS_CONF }}" ]; then
            cp "${{ github.workspace }}/${{ env.FEEDS_CONF }}" ./feeds.conf.default
          fi
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: 🔧 Setup ccache
        run: |
          cd "$OPENWRT_PATH"
          export USE_CCACHE=1
          export CCACHE_DIR="$PWD/.ccache"
          export PATH="/usr/lib/ccache:$PATH"
          mkdir -p "$CCACHE_DIR"
          ccache -M 15G
          ccache -F 150000
          ccache --set-config=compression=true
          ccache --set-config=sloppiness=file_macro,locale,time_macros
          ccache -z # Zero stats before compile

      - name: 🎨 Apply Custom Configuration
        env:
          LAN: ${{ github.event.inputs.lan_addr }}
          ROOT_PASSWORD: ${{ github.event.inputs.root_password }}
          ENABLE_DOCKER: ${{ github.event.inputs.docker == 'true' && 'y' || 'n' }}
          ENABLE_SSRP: ${{ github.event.inputs.ssrp == 'true' && 'y' || 'n' }}
          ENABLE_PASSWALL: ${{ github.event.inputs.passwall == 'true' && 'y' || 'n' }}
          ENABLE_NIKKI: ${{ github.event.inputs.nikki == 'true' && 'y' || 'n' }}
          ENABLE_OPENCLASH: ${{ github.event.inputs.openclash == 'true' && 'y' || 'n' }}
          ENABLE_LUCKY: ${{ github.event.inputs.lucky == 'true' && 'y' || 'n' }}
          ENABLE_OAF: ${{ github.event.inputs.oaf == 'true' && 'y' || 'n' }}
        run: |
          cd "$OPENWRT_PATH"
          
          # 复制自定义文件
          if [ -d "$GITHUB_WORKSPACE/files" ]; then
            cp -r "$GITHUB_WORKSPACE/files" .
          fi
          
          # 复制配置文件
          cp "${{ github.workspace }}/$CONFIG_FILE" .config
          
          # 执行自定义脚本 (安全执行)
          if [ -f "${{ github.workspace }}/$DIY_SCRIPT" ]; then
            chmod +x "${{ github.workspace }}/$DIY_SCRIPT"
            "${{ github.workspace }}/$DIY_SCRIPT"
          fi
          
          # 执行预设脚本 (检查存在性)
          for script in "preset-mihimo-core.sh" "preset-adguard-core.sh"; do
            if [ -f "${{ github.workspace }}/scripts/$script" ]; then
              chmod +x "${{ github.workspace }}/scripts/$script"
              "${{ github.workspace }}/scripts/$script" "$CLASH_KERNEL"
            fi
          done
          
          # 生成配置
          echo "⚙️ Generating defconfig..."
          make defconfig
          
          # 提取目标信息
          DEVICE_TARGET=$(awk -F'"' '/^CONFIG_TARGET_BOARD=/{print $2}' .config || echo "x86")
          DEVICE_SUBTARGET=$(awk -F'"' '/^CONFIG_TARGET_SUBTARGET=/{print $2}' .config || echo "64")
          
          {
            echo "DEVICE_TARGET=$DEVICE_TARGET"
            echo "DEVICE_SUBTARGET=$DEVICE_SUBTARGET"
          } >> $GITHUB_ENV
          
          echo "📱 Target: $DEVICE_TARGET-$DEVICE_SUBTARGET"
          echo "🔧 Prebuilt Toolchain: ${TOOLCHAIN_PREBUILT:-false}"

      - name: 🧹 Clean Build Directory
        if: github.event.inputs.force_clean == 'true'
        run: |
          cd "$OPENWRT_PATH"
          make dirclean

      - name: 📥 Download Packages
        run: |
          cd "$OPENWRT_PATH"
          make download -j$(nproc)

      # ============================================
      # 🔥 3. FAIL-SAFE COMPILATION STRATEGY
      # ============================================
      - name: 🔥 Compile Firmware (with Fail-Safe)
        id: compile
        timeout-minutes: 360
        run: |
          cd "$OPENWRT_PATH"
          export USE_CCACHE=1
          export CCACHE_DIR="$PWD/.ccache"
          export CONFIG_CCACHE=y
          
          compile_success=false
          
          # Phase 1: Attempt build with current state (potentially with prebuilt toolchain)
          echo "🚀 Phase 1: Starting primary compilation attempt..."
          if make -j"$COMPILE_JOBS"; then
            compile_success=true
            echo "✅ Primary compilation successful!"
          else
            echo "⚠️ Primary compilation failed."
            # If prebuilt toolchain was used, it's the likely culprit.
            if [ "${{ steps.prebuilt-toolchain.outputs.status }}" = "success" ]; then
              echo "🔧 Prebuilt toolchain seems incompatible. Cleaning and retrying from scratch..."
              # Clean ONLY the toolchain and dependencies to leverage other caches
              make toolchain/clean
              make tools/clean
              make target/clean
              
              echo "🔄 Phase 2: Retrying compilation without prebuilt toolchain..."
              if make -j"$COMPILE_JOBS"; then
                compile_success=true
                echo "✅ Retry compilation successful!"
              fi
            fi
          fi
          
          # Phase 3: Final fallback to single-threaded verbose build
          if [ "$compile_success" != "true" ]; then
             echo "🔍 Phase 3: Falling back to single-threaded verbose build..."
             if make -j1 V=s; then
                compile_success=true
                echo "✅ Verbose single-threaded build successful!"
             fi
          fi
          
          if [ "$compile_success" != "true" ]; then
            echo "❌ All compilation attempts failed. Please check logs."
            find build_dir/ -name ".log" -print0 | xargs -0 -n1 tail -n 20
            exit 1
          fi
          
          echo "status=success" >> $GITHUB_OUTPUT

      - name: 📊 Analyze Cache & Performance
        if: always()
        id: cache-stats
        run: |
          cd "$OPENWRT_PATH"
          echo "=== 📊 PERFORMANCE REPORT ==="
          ccache -s
          HITS=$(ccache -s | grep "cache hit" | grep -o '[0-9]\+' | head -1)
          MISSES=$(ccache -s | grep "cache miss" | grep -o '[0-9]\+' | head -1)
          if [ -n "$HITS" ] && [ -n "$MISSES" ] && [ "$((HITS + MISSES))" -gt 0 ]; then
            HIT_RATE=$((HITS * 100 / (HITS + MISSES)))
            echo "📈 Calculated Hit Rate: ${HIT_RATE}%"
            echo "hit_rate=$HIT_RATE" >> $GITHUB_OUTPUT
            if [ "$HIT_RATE" -ge 60 ]; then
              echo "🎉 Target Hit Rate (≥60%) Achieved!"
            fi
          fi
          echo "==============================="
          
      - name: 📦 Post-process & Organize Firmware
        if: steps.compile.outputs.status == 'success'
        id: organize
        run: |
          cd "$OPENWRT_PATH/bin/targets"/*/*
          rm -f sha256sums feeds.buildinfo version.buildinfo *.manifest
          cp "$OPENWRT_PATH/.config" .
          echo "firmware_path=$PWD" >> $GITHUB_OUTPUT
          echo "kernel_version=$(grep "^kernel " "$OPENWRT_PATH/.config" | cut -d- -f2)" >> $GITHUB_OUTPUT
          echo "FIRMWARE_PATH=$PWD" >> $GITHUB_ENV
          
      - name: 🚀 Create Release
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true'
        uses: ncipollo/release-action@v1.14.0
        with:
          name: ${{ env.FILE_DATE }} • ${{ env.FIRMWARE_TAG }} • Hit Rate ${{ steps.cache-stats.outputs.hit_rate }}%
          allowUpdates: true
          tag: ${{ env.FIRMWARE_TAG }}-${{ env.FILE_DATE }}
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: ${{ env.FIRMWARE_PATH }}/*
          body: |
            ## ✨ OpenWrt Firmware - Enhanced Build
            
            ### 🚀 Performance
            *   **Cache Hit Rate**: `${{ steps.cache-stats.outputs.hit_rate }}%`
            *   **Prebuilt Toolchain**: `${{ steps.prebuilt-toolchain.outputs.status == 'success' && 'Used' || 'Not Used' }}`
            
            ### 📊 Build Details
            *   **Date**: `${{ env.FILE_DATE }}`
            *   **Target**: `${{ env.DEVICE_TARGET }}/${{ env.DEVICE_SUBTARGET }}`
            *   **Source Hash**: `${{ env.SOURCE_HASH }}`
            
            ### 📦 Included Features 
            *   Docker: ${{ github.event.inputs.docker == 'true' && '✅' || '❌' }}
            *   ShadowSocksR Plus+: ${{ github.event.inputs.ssrp == 'true' && '✅' || '❌' }}
            *   Passwall: ${{ github.event.inputs.passwall == 'true' && '✅' || '❌' }}
            *   OpenClash: ${{ github.event.inputs.openclash == 'true' && '✅' || '❌' }}
            *   And more...

